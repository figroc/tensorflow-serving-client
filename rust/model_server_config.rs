// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow_serving/config/model_server_config.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ModelConfig {
    // message fields
    pub name: ::std::string::String,
    pub base_path: ::std::string::String,
    pub model_type: ModelType,
    pub model_platform: ::std::string::String,
    pub model_version_policy: ::protobuf::SingularPtrField<super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy>,
    pub version_labels: ::std::collections::HashMap<::std::string::String, i64>,
    pub logging_config: ::protobuf::SingularPtrField<super::logging_config::LoggingConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModelConfig {
    fn default() -> &'a ModelConfig {
        <ModelConfig as ::protobuf::Message>::default_instance()
    }
}

impl ModelConfig {
    pub fn new() -> ModelConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string base_path = 2;


    pub fn get_base_path(&self) -> &str {
        &self.base_path
    }
    pub fn clear_base_path(&mut self) {
        self.base_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_path(&mut self, v: ::std::string::String) {
        self.base_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_path(&mut self) -> &mut ::std::string::String {
        &mut self.base_path
    }

    // Take field
    pub fn take_base_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_path, ::std::string::String::new())
    }

    // .tensorflow.serving.ModelType model_type = 3;


    pub fn get_model_type(&self) -> ModelType {
        self.model_type
    }
    pub fn clear_model_type(&mut self) {
        self.model_type = ModelType::MODEL_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_model_type(&mut self, v: ModelType) {
        self.model_type = v;
    }

    // string model_platform = 4;


    pub fn get_model_platform(&self) -> &str {
        &self.model_platform
    }
    pub fn clear_model_platform(&mut self) {
        self.model_platform.clear();
    }

    // Param is passed by value, moved
    pub fn set_model_platform(&mut self, v: ::std::string::String) {
        self.model_platform = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_platform(&mut self) -> &mut ::std::string::String {
        &mut self.model_platform
    }

    // Take field
    pub fn take_model_platform(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model_platform, ::std::string::String::new())
    }

    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;


    pub fn get_model_version_policy(&self) -> &super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy {
        self.model_version_policy.as_ref().unwrap_or_else(|| super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance())
    }
    pub fn clear_model_version_policy(&mut self) {
        self.model_version_policy.clear();
    }

    pub fn has_model_version_policy(&self) -> bool {
        self.model_version_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model_version_policy(&mut self, v: super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy) {
        self.model_version_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_version_policy(&mut self) -> &mut super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy {
        if self.model_version_policy.is_none() {
            self.model_version_policy.set_default();
        }
        self.model_version_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_model_version_policy(&mut self) -> super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy {
        self.model_version_policy.take().unwrap_or_else(|| super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy::new())
    }

    // repeated .tensorflow.serving.ModelConfig.VersionLabelsEntry version_labels = 8;


    pub fn get_version_labels(&self) -> &::std::collections::HashMap<::std::string::String, i64> {
        &self.version_labels
    }
    pub fn clear_version_labels(&mut self) {
        self.version_labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_version_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, i64>) {
        self.version_labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_version_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, i64> {
        &mut self.version_labels
    }

    // Take field
    pub fn take_version_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, i64> {
        ::std::mem::replace(&mut self.version_labels, ::std::collections::HashMap::new())
    }

    // .tensorflow.serving.LoggingConfig logging_config = 6;


    pub fn get_logging_config(&self) -> &super::logging_config::LoggingConfig {
        self.logging_config.as_ref().unwrap_or_else(|| super::logging_config::LoggingConfig::default_instance())
    }
    pub fn clear_logging_config(&mut self) {
        self.logging_config.clear();
    }

    pub fn has_logging_config(&self) -> bool {
        self.logging_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_logging_config(&mut self, v: super::logging_config::LoggingConfig) {
        self.logging_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logging_config(&mut self) -> &mut super::logging_config::LoggingConfig {
        if self.logging_config.is_none() {
            self.logging_config.set_default();
        }
        self.logging_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_logging_config(&mut self) -> super::logging_config::LoggingConfig {
        self.logging_config.take().unwrap_or_else(|| super::logging_config::LoggingConfig::new())
    }
}

impl ::protobuf::Message for ModelConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.model_version_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.logging_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_path)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.model_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model_platform)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.model_version_policy)?;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(wire_type, is, &mut self.version_labels)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.logging_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.base_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_path);
        }
        if self.model_type != ModelType::MODEL_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.model_type);
        }
        if !self.model_platform.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.model_platform);
        }
        if let Some(ref v) = self.model_version_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(8, &self.version_labels);
        if let Some(ref v) = self.logging_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.base_path.is_empty() {
            os.write_string(2, &self.base_path)?;
        }
        if self.model_type != ModelType::MODEL_TYPE_UNSPECIFIED {
            os.write_enum(3, self.model_type.value())?;
        }
        if !self.model_platform.is_empty() {
            os.write_string(4, &self.model_platform)?;
        }
        if let Some(ref v) = self.model_version_policy.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(8, &self.version_labels, os)?;
        if let Some(ref v) = self.logging_config.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModelConfig {
        ModelConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ModelConfig| { &m.name },
                    |m: &mut ModelConfig| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "base_path",
                    |m: &ModelConfig| { &m.base_path },
                    |m: &mut ModelConfig| { &mut m.base_path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ModelType>>(
                    "model_type",
                    |m: &ModelConfig| { &m.model_type },
                    |m: &mut ModelConfig| { &mut m.model_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "model_platform",
                    |m: &ModelConfig| { &m.model_platform },
                    |m: &mut ModelConfig| { &mut m.model_platform },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::file_system_storage_path_source::FileSystemStoragePathSourceConfig_ServableVersionPolicy>>(
                    "model_version_policy",
                    |m: &ModelConfig| { &m.model_version_policy },
                    |m: &mut ModelConfig| { &mut m.model_version_policy },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(
                    "version_labels",
                    |m: &ModelConfig| { &m.version_labels },
                    |m: &mut ModelConfig| { &mut m.version_labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::logging_config::LoggingConfig>>(
                    "logging_config",
                    |m: &ModelConfig| { &m.logging_config },
                    |m: &mut ModelConfig| { &mut m.logging_config },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ModelConfig>(
                    "ModelConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ModelConfig {
        static mut instance: ::protobuf::lazy::Lazy<ModelConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ModelConfig,
        };
        unsafe {
            instance.get(ModelConfig::new)
        }
    }
}

impl ::protobuf::Clear for ModelConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.base_path.clear();
        self.model_type = ModelType::MODEL_TYPE_UNSPECIFIED;
        self.model_platform.clear();
        self.model_version_policy.clear();
        self.version_labels.clear();
        self.logging_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModelConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModelConfigList {
    // message fields
    pub config: ::protobuf::RepeatedField<ModelConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModelConfigList {
    fn default() -> &'a ModelConfigList {
        <ModelConfigList as ::protobuf::Message>::default_instance()
    }
}

impl ModelConfigList {
    pub fn new() -> ModelConfigList {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.serving.ModelConfig config = 1;


    pub fn get_config(&self) -> &[ModelConfig] {
        &self.config
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::RepeatedField<ModelConfig>) {
        self.config = v;
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::RepeatedField<ModelConfig> {
        &mut self.config
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::RepeatedField<ModelConfig> {
        ::std::mem::replace(&mut self.config, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ModelConfigList {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.config {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.config {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModelConfigList {
        ModelConfigList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ModelConfig>>(
                    "config",
                    |m: &ModelConfigList| { &m.config },
                    |m: &mut ModelConfigList| { &mut m.config },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ModelConfigList>(
                    "ModelConfigList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ModelConfigList {
        static mut instance: ::protobuf::lazy::Lazy<ModelConfigList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ModelConfigList,
        };
        unsafe {
            instance.get(ModelConfigList::new)
        }
    }
}

impl ::protobuf::Clear for ModelConfigList {
    fn clear(&mut self) {
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModelConfigList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelConfigList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModelServerConfig {
    // message oneof groups
    pub config: ::std::option::Option<ModelServerConfig_oneof_config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModelServerConfig {
    fn default() -> &'a ModelServerConfig {
        <ModelServerConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ModelServerConfig_oneof_config {
    model_config_list(ModelConfigList),
    custom_model_config(::protobuf::well_known_types::Any),
}

impl ModelServerConfig {
    pub fn new() -> ModelServerConfig {
        ::std::default::Default::default()
    }

    // .tensorflow.serving.ModelConfigList model_config_list = 1;


    pub fn get_model_config_list(&self) -> &ModelConfigList {
        match self.config {
            ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(ref v)) => v,
            _ => ModelConfigList::default_instance(),
        }
    }
    pub fn clear_model_config_list(&mut self) {
        self.config = ::std::option::Option::None;
    }

    pub fn has_model_config_list(&self) -> bool {
        match self.config {
            ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_model_config_list(&mut self, v: ModelConfigList) {
        self.config = ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(v))
    }

    // Mutable pointer to the field.
    pub fn mut_model_config_list(&mut self) -> &mut ModelConfigList {
        if let ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(_)) = self.config {
        } else {
            self.config = ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(ModelConfigList::new()));
        }
        match self.config {
            ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_model_config_list(&mut self) -> ModelConfigList {
        if self.has_model_config_list() {
            match self.config.take() {
                ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(v)) => v,
                _ => panic!(),
            }
        } else {
            ModelConfigList::new()
        }
    }

    // .google.protobuf.Any custom_model_config = 2;


    pub fn get_custom_model_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config {
            ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(ref v)) => v,
            _ => ::protobuf::well_known_types::Any::default_instance(),
        }
    }
    pub fn clear_custom_model_config(&mut self) {
        self.config = ::std::option::Option::None;
    }

    pub fn has_custom_model_config(&self) -> bool {
        match self.config {
            ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_model_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config = ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_model_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(_)) = self.config {
        } else {
            self.config = ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config {
            ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_model_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_custom_model_config() {
            match self.config.take() {
                ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for ModelServerConfig {
    fn is_initialized(&self) -> bool {
        if let Some(ModelServerConfig_oneof_config::model_config_list(ref v)) = self.config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ModelServerConfig_oneof_config::custom_model_config(ref v)) = self.config {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config = ::std::option::Option::Some(ModelServerConfig_oneof_config::model_config_list(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config = ::std::option::Option::Some(ModelServerConfig_oneof_config::custom_model_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.config {
            match v {
                &ModelServerConfig_oneof_config::model_config_list(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ModelServerConfig_oneof_config::custom_model_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.config {
            match v {
                &ModelServerConfig_oneof_config::model_config_list(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ModelServerConfig_oneof_config::custom_model_config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModelServerConfig {
        ModelServerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ModelConfigList>(
                    "model_config_list",
                    ModelServerConfig::has_model_config_list,
                    ModelServerConfig::get_model_config_list,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                    "custom_model_config",
                    ModelServerConfig::has_custom_model_config,
                    ModelServerConfig::get_custom_model_config,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ModelServerConfig>(
                    "ModelServerConfig",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ModelServerConfig {
        static mut instance: ::protobuf::lazy::Lazy<ModelServerConfig> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ModelServerConfig,
        };
        unsafe {
            instance.get(ModelServerConfig::new)
        }
    }
}

impl ::protobuf::Clear for ModelServerConfig {
    fn clear(&mut self) {
        self.config = ::std::option::Option::None;
        self.config = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModelServerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelServerConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ModelType {
    MODEL_TYPE_UNSPECIFIED = 0,
    TENSORFLOW = 1,
    OTHER = 2,
}

impl ::protobuf::ProtobufEnum for ModelType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ModelType> {
        match value {
            0 => ::std::option::Option::Some(ModelType::MODEL_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ModelType::TENSORFLOW),
            2 => ::std::option::Option::Some(ModelType::OTHER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ModelType] = &[
            ModelType::MODEL_TYPE_UNSPECIFIED,
            ModelType::TENSORFLOW,
            ModelType::OTHER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ModelType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ModelType {
}

impl ::std::default::Default for ModelType {
    fn default() -> Self {
        ModelType::MODEL_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3tensorflow_serving/config/model_server_config.proto\x12\x12tensorflow\
    .serving\x1a\x19google/protobuf/any.proto\x1a.tensorflow_serving/config/\
    logging_config.proto\x1aMtensorflow_serving/sources/storage_path/file_sy\
    stem_storage_path_source.proto\"\x93\x04\n\x0bModelConfig\x12\x12\n\x04n\
    ame\x18\x01\x20\x01(\tR\x04name\x12\x1b\n\tbase_path\x18\x02\x20\x01(\tR\
    \x08basePath\x12@\n\nmodel_type\x18\x03\x20\x01(\x0e2\x1d.tensorflow.ser\
    ving.ModelTypeR\tmodelTypeB\x02\x18\x01\x12%\n\x0emodel_platform\x18\x04\
    \x20\x01(\tR\rmodelPlatform\x12}\n\x14model_version_policy\x18\x07\x20\
    \x01(\x0b2K.tensorflow.serving.FileSystemStoragePathSourceConfig.Servabl\
    eVersionPolicyR\x12modelVersionPolicy\x12Y\n\x0eversion_labels\x18\x08\
    \x20\x03(\x0b22.tensorflow.serving.ModelConfig.VersionLabelsEntryR\rvers\
    ionLabels\x12H\n\x0elogging_config\x18\x06\x20\x01(\x0b2!.tensorflow.ser\
    ving.LoggingConfigR\rloggingConfig\x1a@\n\x12VersionLabelsEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x03R\x05value:\x028\x01J\x04\x08\x05\x10\x06\"J\n\x0fModelConfigList\
    \x127\n\x06config\x18\x01\x20\x03(\x0b2\x1f.tensorflow.serving.ModelConf\
    igR\x06config\"\xb8\x01\n\x11ModelServerConfig\x12Q\n\x11model_config_li\
    st\x18\x01\x20\x01(\x0b2#.tensorflow.serving.ModelConfigListH\0R\x0fmode\
    lConfigList\x12F\n\x13custom_model_config\x18\x02\x20\x01(\x0b2\x14.goog\
    le.protobuf.AnyH\0R\x11customModelConfigB\x08\n\x06config*N\n\tModelType\
    \x12\x1e\n\x16MODEL_TYPE_UNSPECIFIED\x10\0\x1a\x02\x08\x01\x12\x12\n\nTE\
    NSORFLOW\x10\x01\x1a\x02\x08\x01\x12\r\n\x05OTHER\x10\x02\x1a\x02\x08\
    \x01B\x03\xf8\x01\x01J\xa8\x18\n\x06\x12\x04\0\0S\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x1b\n\x08\n\x01\x08\x12\
    \x03\x03\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x03\0\x1f\n\t\n\x02\x03\0\x12\
    \x03\x05\0#\n\t\n\x02\x03\x01\x12\x03\x06\08\n\t\n\x02\x03\x02\x12\x03\
    \x07\0W\n?\n\x02\x05\0\x12\x04\x0b\0\x0f\x01\x1a3\x20The\x20type\x20of\
    \x20model.\n\x20TODO(b/31336131):\x20DEPRECATED.\n\n\n\n\x03\x05\0\x01\
    \x12\x03\x0b\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0c\x021\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x0c\x02\x18\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x0c\x1b\x1c\n\x0c\n\x05\x05\0\x02\0\x03\x12\x03\x0c\x1d0\n\r\n\x06\
    \x05\0\x02\0\x03\x01\x12\x03\x0c\x1e/\n\x0b\n\x04\x05\0\x02\x01\x12\x03\
    \r\x02%\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\r\x02\x0c\n\x0c\n\x05\x05\
    \0\x02\x01\x02\x12\x03\r\x0f\x10\n\x0c\n\x05\x05\0\x02\x01\x03\x12\x03\r\
    \x11$\n\r\n\x06\x05\0\x02\x01\x03\x01\x12\x03\r\x12#\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\x0e\x02\x20\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0e\
    \x02\x07\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0e\n\x0b\n\x0c\n\x05\x05\
    \0\x02\x02\x03\x12\x03\x0e\x0c\x1f\n\r\n\x06\x05\0\x02\x02\x03\x01\x12\
    \x03\x0e\r\x1e\nD\n\x02\x04\0\x12\x04\x12\0C\x01\x1a8\x20Common\x20confi\
    guration\x20for\x20loading\x20a\x20model\x20being\x20served.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x12\x08\x13\n!\n\x04\x04\0\x02\0\x12\x03\x14\x02\x12\
    \x1a\x14\x20Name\x20of\x20the\x20model.\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x14\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x14\t\r\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x14\x10\x11\n\x8a\x03\n\x04\x04\0\x02\x01\
    \x12\x03\x1d\x02\x17\x1a\xfc\x02\x20Base\x20path\x20to\x20the\x20model,\
    \x20excluding\x20the\x20version\x20directory.\n\x20E.g>\x20for\x20a\x20m\
    odel\x20at\x20/foo/bar/my_model/123,\x20where\x20123\x20is\x20the\x20ver\
    sion,\x20the\n\x20base\x20path\x20is\x20/foo/bar/my_model.\n\n\x20(This\
    \x20can\x20be\x20changed\x20once\x20a\x20model\x20is\x20in\x20serving,\
    \x20*if*\x20the\x20underlying\x20data\n\x20remains\x20the\x20same.\x20Ot\
    herwise\x20there\x20are\x20no\x20guarantees\x20about\x20whether\x20the\
    \x20old\n\x20or\x20new\x20data\x20will\x20be\x20used\x20for\x20model\x20\
    versions\x20currently\x20loaded.)\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1d\t\x12\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x1d\x15\x16\na\n\x04\x04\0\x02\x02\x12\
    \x03!\x02/\x1aT\x20Type\x20of\x20model.\n\x20TODO(b/31336131):\x20DEPREC\
    ATED.\x20Please\x20use\x20'model_platform'\x20instead.\n\n\x0c\n\x05\x04\
    \0\x02\x02\x06\x12\x03!\x02\x0b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03!\
    \x0c\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03!\x19\x1a\n\x0c\n\x05\x04\
    \0\x02\x02\x08\x12\x03!\x1b.\n\r\n\x06\x04\0\x02\x02\x08\x03\x12\x03!\
    \x1c-\nh\n\x04\x04\0\x02\x03\x12\x03&\x02\x1c\x1a[\x20Type\x20of\x20mode\
    l\x20(e.g.\x20\"tensorflow\").\n\n\x20(This\x20cannot\x20be\x20changed\
    \x20once\x20a\x20model\x20is\x20in\x20serving.)\n\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03&\t\x17\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03&\x1a\x1b\n\n\n\x03\x04\0\t\x12\x03(\
    \x02\r\n\x0b\n\x04\x04\0\t\0\x12\x03(\x0b\x0c\n\x0c\n\x05\x04\0\t\0\x01\
    \x12\x03(\x0b\x0c\n\x0c\n\x05\x04\0\t\0\x02\x12\x03(\x0b\x0c\n\x88\x02\n\
    \x04\x04\0\x02\x04\x12\x04/\x020\x08\x1a\xf9\x01\x20Version\x20policy\
    \x20for\x20the\x20model\x20indicating\x20which\x20version(s)\x20of\x20th\
    e\x20model\x20to\n\x20load\x20and\x20make\x20available\x20for\x20serving\
    \x20simultaneously.\n\x20The\x20default\x20option\x20is\x20to\x20serve\
    \x20only\x20the\x20latest\x20version\x20of\x20the\x20model.\n\n\x20(This\
    \x20can\x20be\x20changed\x20once\x20a\x20model\x20is\x20in\x20serving.)\
    \n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03/\x029\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03/:N\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x030\x06\x07\n\xd1\x05\
    \n\x04\x04\0\x02\x05\x12\x03=\x02(\x1a\xc3\x05\x20String\x20labels\x20to\
    \x20associate\x20with\x20versions\x20of\x20the\x20model,\x20allowing\x20\
    inference\n\x20queries\x20to\x20refer\x20to\x20versions\x20by\x20label\
    \x20instead\x20of\x20number.\x20Multiple\x20labels\n\x20can\x20map\x20to\
    \x20the\x20same\x20version,\x20but\x20not\x20vice-versa.\n\n\x20An\x20en\
    visioned\x20use-case\x20for\x20these\x20labels\x20is\x20canarying\x20ten\
    tative\x20versions.\n\x20For\x20example,\x20one\x20can\x20assign\x20labe\
    ls\x20\"stable\"\x20and\x20\"canary\"\x20to\x20two\x20specific\n\x20vers\
    ions.\x20Perhaps\x20initially\x20\"stable\"\x20is\x20assigned\x20to\x20v\
    ersion\x200\x20and\x20\"canary\"\n\x20to\x20version\x201.\x20Once\x20ver\
    sion\x201\x20passes\x20canary,\x20one\x20can\x20shift\x20the\x20\"stable\
    \"\n\x20label\x20to\x20refer\x20to\x20version\x201\x20(at\x20that\x20poi\
    nt\x20both\x20labels\x20map\x20to\x20the\x20same\n\x20version\x20--\x20v\
    ersion\x201\x20--\x20which\x20is\x20fine).\x20Later\x20once\x20version\
    \x202\x20is\x20ready\x20to\n\x20canary\x20one\x20can\x20move\x20the\x20\
    \"canary\"\x20label\x20to\x20version\x202.\x20And\x20so\x20on.\n\n\x0c\n\
    \x05\x04\0\x02\x05\x06\x12\x03=\x02\x14\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03=\x15#\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03=&'\n{\n\x04\x04\0\
    \x02\x06\x12\x03B\x02#\x1an\x20Configures\x20logging\x20requests\x20and\
    \x20responses,\x20to\x20the\x20model.\n\n\x20(This\x20can\x20be\x20chang\
    ed\x20once\x20a\x20model\x20is\x20in\x20serving.)\n\n\x0c\n\x05\x04\0\
    \x02\x06\x06\x12\x03B\x02\x0f\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03B\x10\
    \x1e\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03B!\"\n=\n\x02\x04\x01\x12\x04F\
    \0H\x01\x1a1\x20Static\x20list\x20of\x20models\x20to\x20be\x20loaded\x20\
    for\x20serving.\n\n\n\n\x03\x04\x01\x01\x12\x03F\x08\x17\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03G\x02\"\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03G\x02\n\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03G\x0b\x16\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03G\x17\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03G\x20!\n!\n\
    \x02\x04\x02\x12\x04K\0S\x01\x1a\x15\x20ModelServer\x20config.\n\n\n\n\
    \x03\x04\x02\x01\x12\x03K\x08\x19\n\xd6\x01\n\x04\x04\x02\x08\0\x12\x04O\
    \x02R\x03\x1a\xc7\x01\x20ModelServer\x20takes\x20either\x20a\x20static\
    \x20file-based\x20model\x20config\x20list\x20or\x20an\x20Any\n\x20proto\
    \x20representing\x20custom\x20model\x20config\x20that\x20is\x20fetched\
    \x20dynamically\x20at\n\x20runtime\x20(through\x20network\x20RPC,\x20cus\
    tom\x20service,\x20etc.).\n\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03O\x08\
    \x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03P\x04*\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03P\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03P\x14%\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03P()\n\x0b\n\x04\x04\x02\x02\x01\x12\x03Q\
    \x040\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03Q\x04\x17\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03Q\x18+\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03Q.\
    /b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
