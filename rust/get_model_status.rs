// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow_serving/apis/get_model_status.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct GetModelStatusRequest {
    // message fields
    pub model_spec: ::protobuf::SingularPtrField<super::model::ModelSpec>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetModelStatusRequest {
    fn default() -> &'a GetModelStatusRequest {
        <GetModelStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetModelStatusRequest {
    pub fn new() -> GetModelStatusRequest {
        ::std::default::Default::default()
    }

    // .tensorflow.serving.ModelSpec model_spec = 1;


    pub fn get_model_spec(&self) -> &super::model::ModelSpec {
        self.model_spec.as_ref().unwrap_or_else(|| super::model::ModelSpec::default_instance())
    }
    pub fn clear_model_spec(&mut self) {
        self.model_spec.clear();
    }

    pub fn has_model_spec(&self) -> bool {
        self.model_spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model_spec(&mut self, v: super::model::ModelSpec) {
        self.model_spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_spec(&mut self) -> &mut super::model::ModelSpec {
        if self.model_spec.is_none() {
            self.model_spec.set_default();
        }
        self.model_spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_model_spec(&mut self) -> super::model::ModelSpec {
        self.model_spec.take().unwrap_or_else(|| super::model::ModelSpec::new())
    }
}

impl ::protobuf::Message for GetModelStatusRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.model_spec {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.model_spec)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.model_spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.model_spec.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetModelStatusRequest {
        GetModelStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::model::ModelSpec>>(
                    "model_spec",
                    |m: &GetModelStatusRequest| { &m.model_spec },
                    |m: &mut GetModelStatusRequest| { &mut m.model_spec },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetModelStatusRequest>(
                    "GetModelStatusRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetModelStatusRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetModelStatusRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetModelStatusRequest,
        };
        unsafe {
            instance.get(GetModelStatusRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetModelStatusRequest {
    fn clear(&mut self) {
        self.model_spec.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetModelStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetModelStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModelVersionStatus {
    // message fields
    pub version: i64,
    pub state: ModelVersionStatus_State,
    pub status: ::protobuf::SingularPtrField<super::status::StatusProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModelVersionStatus {
    fn default() -> &'a ModelVersionStatus {
        <ModelVersionStatus as ::protobuf::Message>::default_instance()
    }
}

impl ModelVersionStatus {
    pub fn new() -> ModelVersionStatus {
        ::std::default::Default::default()
    }

    // int64 version = 1;


    pub fn get_version(&self) -> i64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    // .tensorflow.serving.ModelVersionStatus.State state = 2;


    pub fn get_state(&self) -> ModelVersionStatus_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = ModelVersionStatus_State::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ModelVersionStatus_State) {
        self.state = v;
    }

    // .tensorflow.serving.StatusProto status = 3;


    pub fn get_status(&self) -> &super::status::StatusProto {
        self.status.as_ref().unwrap_or_else(|| super::status::StatusProto::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::status::StatusProto) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::status::StatusProto {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::status::StatusProto {
        self.status.take().unwrap_or_else(|| super::status::StatusProto::new())
    }
}

impl ::protobuf::Message for ModelVersionStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != ModelVersionStatus_State::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.state);
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_int64(1, self.version)?;
        }
        if self.state != ModelVersionStatus_State::UNKNOWN {
            os.write_enum(2, self.state.value())?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModelVersionStatus {
        ModelVersionStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "version",
                    |m: &ModelVersionStatus| { &m.version },
                    |m: &mut ModelVersionStatus| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ModelVersionStatus_State>>(
                    "state",
                    |m: &ModelVersionStatus| { &m.state },
                    |m: &mut ModelVersionStatus| { &mut m.state },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::StatusProto>>(
                    "status",
                    |m: &ModelVersionStatus| { &m.status },
                    |m: &mut ModelVersionStatus| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ModelVersionStatus>(
                    "ModelVersionStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ModelVersionStatus {
        static mut instance: ::protobuf::lazy::Lazy<ModelVersionStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ModelVersionStatus,
        };
        unsafe {
            instance.get(ModelVersionStatus::new)
        }
    }
}

impl ::protobuf::Clear for ModelVersionStatus {
    fn clear(&mut self) {
        self.version = 0;
        self.state = ModelVersionStatus_State::UNKNOWN;
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModelVersionStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelVersionStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ModelVersionStatus_State {
    UNKNOWN = 0,
    START = 10,
    LOADING = 20,
    AVAILABLE = 30,
    UNLOADING = 40,
    END = 50,
}

impl ::protobuf::ProtobufEnum for ModelVersionStatus_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ModelVersionStatus_State> {
        match value {
            0 => ::std::option::Option::Some(ModelVersionStatus_State::UNKNOWN),
            10 => ::std::option::Option::Some(ModelVersionStatus_State::START),
            20 => ::std::option::Option::Some(ModelVersionStatus_State::LOADING),
            30 => ::std::option::Option::Some(ModelVersionStatus_State::AVAILABLE),
            40 => ::std::option::Option::Some(ModelVersionStatus_State::UNLOADING),
            50 => ::std::option::Option::Some(ModelVersionStatus_State::END),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ModelVersionStatus_State] = &[
            ModelVersionStatus_State::UNKNOWN,
            ModelVersionStatus_State::START,
            ModelVersionStatus_State::LOADING,
            ModelVersionStatus_State::AVAILABLE,
            ModelVersionStatus_State::UNLOADING,
            ModelVersionStatus_State::END,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ModelVersionStatus_State", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ModelVersionStatus_State {
}

impl ::std::default::Default for ModelVersionStatus_State {
    fn default() -> Self {
        ModelVersionStatus_State::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ModelVersionStatus_State {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetModelStatusResponse {
    // message fields
    pub model_version_status: ::protobuf::RepeatedField<ModelVersionStatus>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetModelStatusResponse {
    fn default() -> &'a GetModelStatusResponse {
        <GetModelStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetModelStatusResponse {
    pub fn new() -> GetModelStatusResponse {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.serving.ModelVersionStatus model_version_status = 1;


    pub fn get_model_version_status(&self) -> &[ModelVersionStatus] {
        &self.model_version_status
    }
    pub fn clear_model_version_status(&mut self) {
        self.model_version_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_model_version_status(&mut self, v: ::protobuf::RepeatedField<ModelVersionStatus>) {
        self.model_version_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_model_version_status(&mut self) -> &mut ::protobuf::RepeatedField<ModelVersionStatus> {
        &mut self.model_version_status
    }

    // Take field
    pub fn take_model_version_status(&mut self) -> ::protobuf::RepeatedField<ModelVersionStatus> {
        ::std::mem::replace(&mut self.model_version_status, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetModelStatusResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.model_version_status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.model_version_status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.model_version_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.model_version_status {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetModelStatusResponse {
        GetModelStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ModelVersionStatus>>(
                    "model_version_status",
                    |m: &GetModelStatusResponse| { &m.model_version_status },
                    |m: &mut GetModelStatusResponse| { &mut m.model_version_status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetModelStatusResponse>(
                    "GetModelStatusResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetModelStatusResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetModelStatusResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetModelStatusResponse,
        };
        unsafe {
            instance.get(GetModelStatusResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetModelStatusResponse {
    fn clear(&mut self) {
        self.model_version_status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetModelStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetModelStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.tensorflow_serving/apis/get_model_status.proto\x12\x12tensorflow.serv\
    ing\x1a#tensorflow_serving/apis/model.proto\x1a$tensorflow_serving/util/\
    status.proto\"U\n\x15GetModelStatusRequest\x12<\n\nmodel_spec\x18\x01\
    \x20\x01(\x0b2\x1d.tensorflow.serving.ModelSpecR\tmodelSpec\"\x80\x02\n\
    \x12ModelVersionStatus\x12\x18\n\x07version\x18\x01\x20\x01(\x03R\x07ver\
    sion\x12B\n\x05state\x18\x02\x20\x01(\x0e2,.tensorflow.serving.ModelVers\
    ionStatus.StateR\x05state\x127\n\x06status\x18\x03\x20\x01(\x0b2\x1f.ten\
    sorflow.serving.StatusProtoR\x06status\"S\n\x05State\x12\x0b\n\x07UNKNOW\
    N\x10\0\x12\t\n\x05START\x10\n\x12\x0b\n\x07LOADING\x10\x14\x12\r\n\tAVA\
    ILABLE\x10\x1e\x12\r\n\tUNLOADING\x10(\x12\x07\n\x03END\x102\"t\n\x16Get\
    ModelStatusResponse\x12Z\n\x14model_version_status\x18\x01\x20\x03(\x0b2\
    &.tensorflow.serving.ModelVersionStatusR\x14model_version_statusB\x03\
    \xf8\x01\x01J\xec\x11\n\x06\x12\x04\0\0C\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x08\x12\x03\x02\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x02\0\
    \x1f\n\t\n\x02\x03\0\x12\x03\x04\0-\n\t\n\x02\x03\x01\x12\x03\x05\0.\n\
    \x08\n\x01\x02\x12\x03\x07\0\x1b\ng\n\x02\x04\0\x12\x04\x0b\0\x10\x01\
    \x1a[\x20GetModelStatusRequest\x20contains\x20a\x20ModelSpec\x20indicati\
    ng\x20the\x20model\x20for\x20which\n\x20to\x20get\x20status.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x0b\x08\x1d\n\xce\x01\n\x04\x04\0\x02\0\x12\x03\x0f\
    \x02\x1b\x1a\xc0\x01\x20Model\x20Specification.\x20If\x20version\x20is\
    \x20not\x20specified,\x20information\x20about\x20all\n\x20versions\x20of\
    \x20the\x20model\x20will\x20be\x20returned.\x20If\x20a\x20version\x20is\
    \x20specified,\x20the\n\x20status\x20of\x20only\x20that\x20version\x20wi\
    ll\x20be\x20returned.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0f\x02\x0b\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0c\x16\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0f\x19\x1a\nP\n\x02\x04\x01\x12\x04\x13\0<\x01\x1aD\x20Ver\
    sion\x20number,\x20state,\x20and\x20status\x20for\x20a\x20single\x20vers\
    ion\x20of\x20a\x20model.\n\n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\x1a\n\
    \x1d\n\x04\x04\x01\x02\0\x12\x03\x15\x02\x14\x1a\x10\x20Model\x20version\
    .\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x15\x08\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x15\x12\x13\na\n\x04\x04\x01\x04\0\x12\x04\x19\x025\x03\x1aS\x20States\
    \x20that\x20map\x20to\x20ManagerState\x20enum\x20in\n\x20tensorflow_serv\
    ing/core/servable_state.h\n\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x19\
    \x07\x0c\n\x1f\n\x06\x04\x01\x04\0\x02\0\x12\x03\x1b\x04\x10\x1a\x10\x20\
    Default\x20value.\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\x03\x1b\x04\
    \x0b\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03\x1b\x0e\x0f\nk\n\x06\
    \x04\x01\x04\0\x02\x01\x12\x03\x1f\x04\x0f\x1a\\\x20The\x20manager\x20is\
    \x20tracking\x20this\x20servable,\x20but\x20has\x20not\x20initiated\x20a\
    ny\x20action\n\x20pertaining\x20to\x20it.\n\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x01\x01\x12\x03\x1f\x04\t\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\
    \x03\x1f\x0c\x0e\n\xd3\x01\n\x06\x04\x01\x04\0\x02\x02\x12\x03$\x04\x11\
    \x1a\xc3\x01\x20The\x20manager\x20has\x20decided\x20to\x20load\x20this\
    \x20servable.\x20In\x20particular,\x20checks\n\x20around\x20resource\x20\
    availability\x20and\x20other\x20aspects\x20have\x20passed,\x20and\x20the\
    \n\x20manager\x20is\x20about\x20to\x20invoke\x20the\x20loader's\x20Load(\
    )\x20method.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03$\x04\x0b\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03$\x0e\x10\n\xec\x01\n\x06\
    \x04\x01\x04\0\x02\x03\x12\x03*\x04\x13\x1a\xdc\x01\x20The\x20manager\
    \x20has\x20successfully\x20loaded\x20this\x20servable\x20and\x20made\x20\
    it\x20available\n\x20for\x20serving\x20(i.e.\x20GetServableHandle(id)\
    \x20will\x20succeed).\x20To\x20avoid\x20races,\n\x20this\x20state\x20is\
    \x20not\x20reported\x20until\x20*after*\x20the\x20servable\x20is\x20made\
    \n\x20available.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x03\x01\x12\x03*\x04\r\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x03\x02\x12\x03*\x10\x12\n\xaf\x01\n\x06\
    \x04\x01\x04\0\x02\x04\x12\x03/\x04\x13\x1a\x9f\x01\x20The\x20manager\
    \x20has\x20decided\x20to\x20make\x20this\x20servable\x20unavailable,\x20\
    and\x20unload\n\x20it.\x20To\x20avoid\x20races,\x20this\x20state\x20is\
    \x20reported\x20*before*\x20the\x20servable\x20is\n\x20made\x20unavailab\
    le.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x04\x01\x12\x03/\x04\r\n\x0e\n\x07\
    \x04\x01\x04\0\x02\x04\x02\x12\x03/\x10\x12\n\xbe\x01\n\x06\x04\x01\x04\
    \0\x02\x05\x12\x034\x04\r\x1a\xae\x01\x20This\x20servable\x20has\x20reac\
    hed\x20the\x20end\x20of\x20its\x20journey\x20in\x20the\x20manager.\x20Ei\
    ther\n\x20it\x20loaded\x20and\x20ultimately\x20unloaded\x20successfully,\
    \x20or\x20it\x20hit\x20an\x20error\x20at\n\x20some\x20point\x20in\x20its\
    \x20lifecycle.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x05\x01\x12\x034\x04\x07\
    \n\x0e\n\x07\x04\x01\x04\0\x02\x05\x02\x12\x034\n\x0c\n\x1b\n\x04\x04\
    \x01\x02\x01\x12\x038\x02\x12\x1a\x0e\x20Model\x20state.\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x038\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x038\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x038\x10\x11\n\x1c\n\
    \x04\x04\x01\x02\x02\x12\x03;\x02\x19\x1a\x0f\x20Model\x20status.\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x06\x12\x03;\x02\r\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03;\x0e\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03;\x17\
    \x18\n@\n\x02\x04\x02\x12\x04?\0C\x01\x1a4\x20Response\x20for\x20ModelSt\
    atusRequest\x20on\x20successful\x20run.\n\n\n\n\x03\x04\x02\x01\x12\x03?\
    \x08\x1e\nV\n\x04\x04\x02\x02\0\x12\x04A\x02B+\x1aH\x20Version\x20number\
    \x20and\x20status\x20information\x20for\x20applicable\x20model\x20versio\
    n(s).\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03A\x02\n\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03A\x0b\x1d\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03A\x1e2\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03A56\n\x0c\n\x05\x04\x02\x02\0\x08\
    \x12\x03B\x06*\n\x0c\n\x05\x04\x02\x02\0\n\x12\x03B\x07)\n\x0c\n\x05\x04\
    \x02\x02\0\n\x12\x03B\x13)b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
