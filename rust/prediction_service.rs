// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow_serving/apis/prediction_service.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0tensorflow_serving/apis/prediction_service.proto\x12\x12tensorflow.se\
    rving\x1a,tensorflow_serving/apis/classification.proto\x1a0tensorflow_se\
    rving/apis/get_model_metadata.proto\x1a'tensorflow_serving/apis/inferenc\
    e.proto\x1a%tensorflow_serving/apis/predict.proto\x1a(tensorflow_serving\
    /apis/regression.proto2\xfc\x03\n\x11PredictionService\x12a\n\x08Classif\
    y\x12).tensorflow.serving.ClassificationRequest\x1a*.tensorflow.serving.\
    ClassificationResponse\x12X\n\x07Regress\x12%.tensorflow.serving.Regress\
    ionRequest\x1a&.tensorflow.serving.RegressionResponse\x12R\n\x07Predict\
    \x12\".tensorflow.serving.PredictRequest\x1a#.tensorflow.serving.Predict\
    Response\x12g\n\x0eMultiInference\x12).tensorflow.serving.MultiInference\
    Request\x1a*.tensorflow.serving.MultiInferenceResponse\x12m\n\x10GetMode\
    lMetadata\x12+.tensorflow.serving.GetModelMetadataRequest\x1a,.tensorflo\
    w.serving.GetModelMetadataResponseB\x03\xf8\x01\x01J\xd8\x05\n\x06\x12\
    \x04\0\0\x1e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x1b\n\x08\n\x01\x08\x12\x03\x03\0\x1f\n\t\n\x02\x08\x1f\x12\x03\
    \x03\0\x1f\n\t\n\x02\x03\0\x12\x03\x05\06\n\t\n\x02\x03\x01\x12\x03\x06\
    \0:\n\t\n\x02\x03\x02\x12\x03\x07\01\n\t\n\x02\x03\x03\x12\x03\x08\0/\n\
    \t\n\x02\x03\x04\x12\x03\t\02\n\x86\x01\n\x02\x06\0\x12\x04\x0e\0\x1e\
    \x01\x1az\x20open\x20source\x20marker;\x20do\x20not\x20remove\n\x20Predi\
    ctionService\x20provides\x20access\x20to\x20machine-learned\x20models\
    \x20loaded\x20by\n\x20model_servers.\n\n\n\n\x03\x06\0\x01\x12\x03\x0e\
    \x08\x19\n\x18\n\x04\x06\0\x02\0\x12\x03\x10\x02G\x1a\x0b\x20Classify.\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x10\x06\x0e\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x10\x0f$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x10/E\n\x17\n\
    \x04\x06\0\x02\x01\x12\x03\x13\x02>\x1a\n\x20Regress.\n\n\x0c\n\x05\x06\
    \0\x02\x01\x01\x12\x03\x13\x06\r\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x13\x0e\x1f\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x13*<\nE\n\x04\x06\0\
    \x02\x02\x12\x03\x16\x028\x1a8\x20Predict\x20--\x20provides\x20access\
    \x20to\x20loaded\x20TensorFlow\x20model.\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x16\x06\r\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x16\x0e\x1c\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x16'6\n:\n\x04\x06\0\x02\x03\x12\
    \x03\x19\x02M\x1a-\x20MultiInference\x20API\x20for\x20multi-headed\x20mo\
    dels.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x19\x06\x14\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03\x19\x15*\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03\x195K\nQ\n\x04\x06\0\x02\x04\x12\x04\x1c\x02\x1d)\x1aC\x20GetModelM\
    etadata\x20-\x20provides\x20access\x20to\x20metadata\x20for\x20loaded\
    \x20models.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x1c\x06\x16\n\x0c\n\
    \x05\x06\0\x02\x04\x02\x12\x03\x1c\x17.\n\x0c\n\x05\x06\0\x02\x04\x03\
    \x12\x03\x1d\x0f'b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
