// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow_serving/apis/session_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct SessionRunRequest {
    // message fields
    pub model_spec: ::protobuf::SingularPtrField<super::model::ModelSpec>,
    pub feed: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>,
    pub fetch: ::protobuf::RepeatedField<::std::string::String>,
    pub target: ::protobuf::RepeatedField<::std::string::String>,
    pub options: ::protobuf::SingularPtrField<super::config::RunOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionRunRequest {
    fn default() -> &'a SessionRunRequest {
        <SessionRunRequest as ::protobuf::Message>::default_instance()
    }
}

impl SessionRunRequest {
    pub fn new() -> SessionRunRequest {
        ::std::default::Default::default()
    }

    // .tensorflow.serving.ModelSpec model_spec = 1;


    pub fn get_model_spec(&self) -> &super::model::ModelSpec {
        self.model_spec.as_ref().unwrap_or_else(|| <super::model::ModelSpec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_model_spec(&mut self) {
        self.model_spec.clear();
    }

    pub fn has_model_spec(&self) -> bool {
        self.model_spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model_spec(&mut self, v: super::model::ModelSpec) {
        self.model_spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_spec(&mut self) -> &mut super::model::ModelSpec {
        if self.model_spec.is_none() {
            self.model_spec.set_default();
        }
        self.model_spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_model_spec(&mut self) -> super::model::ModelSpec {
        self.model_spec.take().unwrap_or_else(|| super::model::ModelSpec::new())
    }

    // repeated .tensorflow.NamedTensorProto feed = 2;


    pub fn get_feed(&self) -> &[super::named_tensor::NamedTensorProto] {
        &self.feed
    }
    pub fn clear_feed(&mut self) {
        self.feed.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed(&mut self, v: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>) {
        self.feed = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed(&mut self) -> &mut ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        &mut self.feed
    }

    // Take field
    pub fn take_feed(&mut self) -> ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        ::std::mem::replace(&mut self.feed, ::protobuf::RepeatedField::new())
    }

    // repeated string fetch = 3;


    pub fn get_fetch(&self) -> &[::std::string::String] {
        &self.fetch
    }
    pub fn clear_fetch(&mut self) {
        self.fetch.clear();
    }

    // Param is passed by value, moved
    pub fn set_fetch(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.fetch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fetch(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.fetch
    }

    // Take field
    pub fn take_fetch(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.fetch, ::protobuf::RepeatedField::new())
    }

    // repeated string target = 4;


    pub fn get_target(&self) -> &[::std::string::String] {
        &self.target
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.target = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.target, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.RunOptions options = 5;


    pub fn get_options(&self) -> &super::config::RunOptions {
        self.options.as_ref().unwrap_or_else(|| <super::config::RunOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::config::RunOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::config::RunOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::config::RunOptions {
        self.options.take().unwrap_or_else(|| super::config::RunOptions::new())
    }
}

impl ::protobuf::Message for SessionRunRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.model_spec {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feed {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.model_spec)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.fetch)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.target)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.model_spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.feed {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.fetch {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.target {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.model_spec.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.feed {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.fetch {
            os.write_string(3, &v)?;
        };
        for v in &self.target {
            os.write_string(4, &v)?;
        };
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionRunRequest {
        SessionRunRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::model::ModelSpec>>(
                "model_spec",
                |m: &SessionRunRequest| { &m.model_spec },
                |m: &mut SessionRunRequest| { &mut m.model_spec },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::named_tensor::NamedTensorProto>>(
                "feed",
                |m: &SessionRunRequest| { &m.feed },
                |m: &mut SessionRunRequest| { &mut m.feed },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fetch",
                |m: &SessionRunRequest| { &m.fetch },
                |m: &mut SessionRunRequest| { &mut m.fetch },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target",
                |m: &SessionRunRequest| { &m.target },
                |m: &mut SessionRunRequest| { &mut m.target },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::RunOptions>>(
                "options",
                |m: &SessionRunRequest| { &m.options },
                |m: &mut SessionRunRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionRunRequest>(
                "SessionRunRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionRunRequest {
        static instance: ::protobuf::rt::LazyV2<SessionRunRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionRunRequest::new)
    }
}

impl ::protobuf::Clear for SessionRunRequest {
    fn clear(&mut self) {
        self.model_spec.clear();
        self.feed.clear();
        self.fetch.clear();
        self.target.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionRunRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionRunRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionRunResponse {
    // message fields
    pub model_spec: ::protobuf::SingularPtrField<super::model::ModelSpec>,
    pub tensor: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>,
    pub metadata: ::protobuf::SingularPtrField<super::config::RunMetadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionRunResponse {
    fn default() -> &'a SessionRunResponse {
        <SessionRunResponse as ::protobuf::Message>::default_instance()
    }
}

impl SessionRunResponse {
    pub fn new() -> SessionRunResponse {
        ::std::default::Default::default()
    }

    // .tensorflow.serving.ModelSpec model_spec = 3;


    pub fn get_model_spec(&self) -> &super::model::ModelSpec {
        self.model_spec.as_ref().unwrap_or_else(|| <super::model::ModelSpec as ::protobuf::Message>::default_instance())
    }
    pub fn clear_model_spec(&mut self) {
        self.model_spec.clear();
    }

    pub fn has_model_spec(&self) -> bool {
        self.model_spec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model_spec(&mut self, v: super::model::ModelSpec) {
        self.model_spec = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_spec(&mut self) -> &mut super::model::ModelSpec {
        if self.model_spec.is_none() {
            self.model_spec.set_default();
        }
        self.model_spec.as_mut().unwrap()
    }

    // Take field
    pub fn take_model_spec(&mut self) -> super::model::ModelSpec {
        self.model_spec.take().unwrap_or_else(|| super::model::ModelSpec::new())
    }

    // repeated .tensorflow.NamedTensorProto tensor = 1;


    pub fn get_tensor(&self) -> &[super::named_tensor::NamedTensorProto] {
        &self.tensor
    }
    pub fn clear_tensor(&mut self) {
        self.tensor.clear();
    }

    // Param is passed by value, moved
    pub fn set_tensor(&mut self, v: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>) {
        self.tensor = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tensor(&mut self) -> &mut ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        &mut self.tensor
    }

    // Take field
    pub fn take_tensor(&mut self) -> ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        ::std::mem::replace(&mut self.tensor, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.RunMetadata metadata = 2;


    pub fn get_metadata(&self) -> &super::config::RunMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::config::RunMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::config::RunMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::config::RunMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::config::RunMetadata {
        self.metadata.take().unwrap_or_else(|| super::config::RunMetadata::new())
    }
}

impl ::protobuf::Message for SessionRunResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.model_spec {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tensor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.model_spec)?;
                },
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tensor)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.model_spec.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.tensor {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.model_spec.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.tensor {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionRunResponse {
        SessionRunResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::model::ModelSpec>>(
                "model_spec",
                |m: &SessionRunResponse| { &m.model_spec },
                |m: &mut SessionRunResponse| { &mut m.model_spec },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::named_tensor::NamedTensorProto>>(
                "tensor",
                |m: &SessionRunResponse| { &m.tensor },
                |m: &mut SessionRunResponse| { &mut m.tensor },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::RunMetadata>>(
                "metadata",
                |m: &SessionRunResponse| { &m.metadata },
                |m: &mut SessionRunResponse| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionRunResponse>(
                "SessionRunResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionRunResponse {
        static instance: ::protobuf::rt::LazyV2<SessionRunResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionRunResponse::new)
    }
}

impl ::protobuf::Clear for SessionRunResponse {
    fn clear(&mut self) {
        self.model_spec.clear();
        self.tensor.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionRunResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionRunResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-tensorflow_serving/apis/session_service.proto\x12\x12tensorflow.servi\
    ng\x1a#tensorflow_serving/apis/model.proto\x1a%tensorflow/core/protobuf/\
    config.proto\x1a+tensorflow/core/protobuf/named_tensor.proto\"\xe3\x01\n\
    \x11SessionRunRequest\x12<\n\nmodel_spec\x18\x01\x20\x01(\x0b2\x1d.tenso\
    rflow.serving.ModelSpecR\tmodelSpec\x120\n\x04feed\x18\x02\x20\x03(\x0b2\
    \x1c.tensorflow.NamedTensorProtoR\x04feed\x12\x14\n\x05fetch\x18\x03\x20\
    \x03(\tR\x05fetch\x12\x16\n\x06target\x18\x04\x20\x03(\tR\x06target\x120\
    \n\x07options\x18\x05\x20\x01(\x0b2\x16.tensorflow.RunOptionsR\x07option\
    s\"\xbd\x01\n\x12SessionRunResponse\x12<\n\nmodel_spec\x18\x03\x20\x01(\
    \x0b2\x1d.tensorflow.serving.ModelSpecR\tmodelSpec\x124\n\x06tensor\x18\
    \x01\x20\x03(\x0b2\x1c.tensorflow.NamedTensorProtoR\x06tensor\x123\n\x08\
    metadata\x18\x02\x20\x01(\x0b2\x17.tensorflow.RunMetadataR\x08metadata2m\
    \n\x0eSessionService\x12[\n\nSessionRun\x12%.tensorflow.serving.SessionR\
    unRequest\x1a&.tensorflow.serving.SessionRunResponseB\x03\xf8\x01\x01J\
    \xea\r\n\x06\x12\x04\0\02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x08\x12\x03\x02\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x02\0\x1f\n\t\n\x02\
    \x03\0\x12\x03\x04\0-\n\t\n\x02\x03\x01\x12\x03\x05\0/\n\t\n\x02\x03\x02\
    \x12\x03\x06\05\n\x08\n\x01\x02\x12\x03\x08\0\x1b\n\n\n\x02\x04\0\x12\
    \x04\n\0\x1d\x01\n\n\n\x03\x04\0\x01\x12\x03\n\x08\x19\nj\n\x04\x04\0\
    \x02\0\x12\x03\r\x02\x1b\x1a]\x20Model\x20Specification.\x20If\x20versio\
    n\x20is\x20not\x20specified,\x20will\x20use\x20the\x20latest\n\x20(numer\
    ical)\x20version.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\r\x02\x0b\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\r\x0c\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\r\x19\x1a\nJ\n\x04\x04\0\x02\x01\x12\x03\x10\x02%\x1a=\x20Tensors\
    \x20to\x20be\x20fed\x20in\x20the\x20step.\x20Each\x20feed\x20is\x20a\x20\
    named\x20tensor.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x10\x02\n\n\x0c\
    \n\x05\x04\0\x02\x01\x06\x12\x03\x10\x0b\x1b\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x10\x1c\x20\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10#$\n\
    \xcd\x01\n\x04\x04\0\x02\x02\x12\x03\x15\x02\x1c\x1a\xbf\x01\x20Fetches.\
    \x20A\x20list\x20of\x20tensor\x20names.\x20The\x20caller\x20expects\x20a\
    \x20tensor\x20to\n\x20be\x20returned\x20for\x20each\x20fetch[i]\x20(see\
    \x20RunResponse.tensor).\x20The\n\x20order\x20of\x20specified\x20fetches\
    \x20does\x20not\x20change\x20the\x20execution\x20order.\n\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x15\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x15\x12\x17\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x15\x1a\x1b\ny\n\x04\x04\0\x02\x03\x12\
    \x03\x19\x02\x1d\x1al\x20Target\x20Nodes.\x20A\x20list\x20of\x20node\x20\
    names.\x20The\x20named\x20nodes\x20will\x20be\x20run\n\x20to\x20but\x20t\
    heir\x20outputs\x20will\x20not\x20be\x20fetched.\n\n\x0c\n\x05\x04\0\x02\
    \x03\x04\x12\x03\x19\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x19\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x19\x12\x18\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x19\x1b\x1c\n?\n\x04\x04\0\x02\x04\x12\x03\x1c\x02\
    \x19\x1a2\x20Options\x20for\x20the\x20run\x20call.\x20**Currently\x20ign\
    ored.**\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x1c\x02\x0c\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\x1c\r\x14\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\x1c\x17\x18\n\n\n\x02\x04\x01\x12\x04\x1f\0)\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1f\x08\x1a\nB\n\x04\x04\x01\x02\0\x12\x03!\x02\x1b\x1a5\
    \x20Effective\x20Model\x20Specification\x20used\x20for\x20session\x20run\
    .\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03!\x02\x0b\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03!\x0c\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03!\x19\
    \x1a\nu\n\x04\x04\x01\x02\x01\x12\x03%\x02'\x1ah\x20NOTE:\x20The\x20orde\
    r\x20of\x20the\x20returned\x20tensors\x20may\x20or\x20may\x20not\x20matc\
    h\n\x20the\x20fetch\x20order\x20specified\x20in\x20RunRequest.\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x04\x12\x03%\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\
    \x12\x03%\x0b\x1b\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03%\x1c\"\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03%%&\n=\n\x04\x04\x01\x02\x02\x12\x03(\
    \x02\x1b\x1a0\x20Returned\x20metadata\x20if\x20requested\x20in\x20the\
    \x20options.\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03(\x02\r\n\x0c\n\
    \x05\x04\x01\x02\x02\x01\x12\x03(\x0e\x16\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03(\x19\x1a\n\xb8\x02\n\x02\x06\0\x12\x04/\02\x01\x1a\xab\x02\
    \x20SessionService\x20defines\x20a\x20service\x20with\x20which\x20a\x20c\
    lient\x20can\x20interact\x20to\x20execute\n\x20Tensorflow\x20model\x20in\
    ference.\x20The\x20SessionService::SessionRun\x20method\x20is\x20similar\
    \n\x20to\x20MasterService::RunStep\x20of\x20Tensorflow,\x20except\x20tha\
    t\x20all\x20sessions\x20are\x20ready\n\x20to\x20run,\x20and\x20you\x20re\
    quest\x20a\x20specific\x20model/session\x20with\x20ModelSpec.\n\n\n\n\
    \x03\x06\0\x01\x12\x03/\x08\x16\n/\n\x04\x06\0\x02\0\x12\x031\x02A\x1a\"\
    \x20Runs\x20inference\x20of\x20a\x20given\x20model.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x031\x06\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x031\x11\"\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x031-?b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
