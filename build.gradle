buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.10"
  }
}

ext {
  vers = [
    tfs: file("VERSION").text.trim(),
    jvm: "8",
    grpc: "1.24.0",
    proto: "3.10.0"]
  dist = [
    name: project.name,
    version: vers.tfs,
    title: "Tensorflow Serving Client",
    license: "Apache-2.0",
    url: "https://github.com/figroc/tensorflow-serving-client",
    author: [
      id: "figroc",
      name: "Figroc Chen",
      email: "figroc@gmail.com"],
    description: "A prebuilt tensorflow serving client from the tensorflow serving proto files"]
}

static def buildEnviron(options, prefix="TFSCLIENT_DIST") {
  return options.collectEntries([:]) { k, v ->
    def key = "${prefix}_${k.toUpperCase()}".toString()
    return (v instanceof Map) ? buildEnviron(v, key) : [(key): v]
  }
}

version = "${vers.tfs}"

apply plugin: "java-library"

sourceCompatibility = "1.${vers.jvm}"
targetCompatibility = "1.${vers.jvm}"

repositories {
  mavenCentral()
}

apply from: "gradle/grpc.gradle"
apply from: "gradle/cmake.gradle"
apply from: "gradle/java.gradle"
apply from: "gradle/wheel.gradle"
apply from: "gradle/node.gradle"
apply from: "gradle/golang.gradle"
apply from: "gradle/mono.gradle"

task buildAll {
  dependsOn "cmake"
  dependsOn "build"
  dependsOn "wheel"
  dependsOn "node"
  dependsOn "golang"
  dependsOn "mono"
}

apply from: "gradle/ossrh.gradle"

task publishAll {
  dependsOn "publish"
  dependsOn "twine"
  dependsOn "npm"
}
