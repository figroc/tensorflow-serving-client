// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/cost_graph.proto

#include "tensorflow/core/framework/cost_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto;
namespace tensorflow {
class CostGraphDef_Node_InputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostGraphDef_Node_InputInfo> _instance;
} _CostGraphDef_Node_InputInfo_default_instance_;
class CostGraphDef_Node_OutputInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostGraphDef_Node_OutputInfo> _instance;
} _CostGraphDef_Node_OutputInfo_default_instance_;
class CostGraphDef_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostGraphDef_Node> _instance;
} _CostGraphDef_Node_default_instance_;
class CostGraphDef_AggregatedCostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostGraphDef_AggregatedCost> _instance;
} _CostGraphDef_AggregatedCost_default_instance_;
class CostGraphDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CostGraphDef> _instance;
} _CostGraphDef_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CostGraphDef_default_instance_;
    new (ptr) ::tensorflow::CostGraphDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CostGraphDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto}, {
      &scc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
      &scc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CostGraphDef_AggregatedCost_default_instance_;
    new (ptr) ::tensorflow::CostGraphDef_AggregatedCost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CostGraphDef_AggregatedCost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CostGraphDef_Node_default_instance_;
    new (ptr) ::tensorflow::CostGraphDef_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CostGraphDef_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto}, {
      &scc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
      &scc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,}};

static void InitDefaultsscc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CostGraphDef_Node_InputInfo_default_instance_;
    new (ptr) ::tensorflow::CostGraphDef_Node_InputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CostGraphDef_Node_InputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto}, {}};

static void InitDefaultsscc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_CostGraphDef_Node_OutputInfo_default_instance_;
    new (ptr) ::tensorflow::CostGraphDef_Node_OutputInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::CostGraphDef_Node_OutputInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto}, {
      &scc_info_TensorShapeProto_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_InputInfo, preceding_node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_InputInfo, preceding_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, alias_input_port_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, input_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, output_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, temporary_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, persistent_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, host_temp_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, device_temp_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, device_persistent_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, compute_cost_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, compute_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, memory_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, is_final_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, control_input_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, inaccurate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_AggregatedCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_AggregatedCost, cost_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_AggregatedCost, dimension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef, node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef, cost_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::CostGraphDef_Node_InputInfo)},
  { 7, -1, sizeof(::tensorflow::CostGraphDef_Node_OutputInfo)},
  { 16, -1, sizeof(::tensorflow::CostGraphDef_Node)},
  { 37, -1, sizeof(::tensorflow::CostGraphDef_AggregatedCost)},
  { 44, -1, sizeof(::tensorflow::CostGraphDef)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CostGraphDef_Node_InputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CostGraphDef_Node_OutputInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CostGraphDef_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CostGraphDef_AggregatedCost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_CostGraphDef_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*tensorflow/core/framework/cost_graph.p"
  "roto\022\ntensorflow\032,tensorflow/core/framew"
  "ork/tensor_shape.proto\032%tensorflow/core/"
  "framework/types.proto\"\312\006\n\014CostGraphDef\022+"
  "\n\004node\030\001 \003(\0132\035.tensorflow.CostGraphDef.N"
  "ode\0225\n\004cost\030\002 \003(\0132\'.tensorflow.CostGraph"
  "Def.AggregatedCost\032\242\005\n\004Node\022\014\n\004name\030\001 \001("
  "\t\022\016\n\006device\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\022;\n\ninput_i"
  "nfo\030\004 \003(\0132\'.tensorflow.CostGraphDef.Node"
  ".InputInfo\022=\n\013output_info\030\005 \003(\0132(.tensor"
  "flow.CostGraphDef.Node.OutputInfo\022\035\n\025tem"
  "porary_memory_size\030\006 \001(\003\022\036\n\026persistent_m"
  "emory_size\030\014 \001(\003\022!\n\025host_temp_memory_siz"
  "e\030\n \001(\003B\002\030\001\022#\n\027device_temp_memory_size\030\013"
  " \001(\003B\002\030\001\022)\n\035device_persistent_memory_siz"
  "e\030\020 \001(\003B\002\030\001\022\024\n\014compute_cost\030\t \001(\003\022\024\n\014com"
  "pute_time\030\016 \001(\003\022\023\n\013memory_time\030\017 \001(\003\022\020\n\010"
  "is_final\030\007 \001(\010\022\025\n\rcontrol_input\030\010 \003(\005\022\022\n"
  "\ninaccurate\030\021 \001(\010\032;\n\tInputInfo\022\026\n\016preced"
  "ing_node\030\001 \001(\005\022\026\n\016preceding_port\030\002 \001(\005\032\206"
  "\001\n\nOutputInfo\022\014\n\004size\030\001 \001(\003\022\030\n\020alias_inp"
  "ut_port\030\002 \001(\003\022+\n\005shape\030\003 \001(\0132\034.tensorflo"
  "w.TensorShapeProto\022#\n\005dtype\030\004 \001(\0162\024.tens"
  "orflow.DataType\0321\n\016AggregatedCost\022\014\n\004cos"
  "t\030\001 \001(\002\022\021\n\tdimension\030\002 \001(\tB\203\001\n\030org.tenso"
  "rflow.frameworkB\017CostGraphProtosP\001ZQgith"
  "ub.com/tensorflow/tensorflow/tensorflow/"
  "go/core/framework/cost_graph_go_proto\370\001\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_sccs[5] = {
  &scc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
  &scc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
  &scc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
  &scc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
  &scc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto, "tensorflow/core/framework/cost_graph.proto", 1128,
  &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto)), true);
namespace tensorflow {

// ===================================================================

void CostGraphDef_Node_InputInfo::InitAsDefaultInstance() {
}
class CostGraphDef_Node_InputInfo::_Internal {
 public:
};

CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node.InputInfo)
}
CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(const CostGraphDef_Node_InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&preceding_node_, &from.preceding_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&preceding_port_) -
    reinterpret_cast<char*>(&preceding_node_)) + sizeof(preceding_port_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node.InputInfo)
}

void CostGraphDef_Node_InputInfo::SharedCtor() {
  ::memset(&preceding_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preceding_port_) -
      reinterpret_cast<char*>(&preceding_node_)) + sizeof(preceding_port_));
}

CostGraphDef_Node_InputInfo::~CostGraphDef_Node_InputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node.InputInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostGraphDef_Node_InputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CostGraphDef_Node_InputInfo::ArenaDtor(void* object) {
  CostGraphDef_Node_InputInfo* _this = reinterpret_cast< CostGraphDef_Node_InputInfo* >(object);
  (void)_this;
}
void CostGraphDef_Node_InputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostGraphDef_Node_InputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostGraphDef_Node_InputInfo& CostGraphDef_Node_InputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostGraphDef_Node_InputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CostGraphDef_Node_InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&preceding_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preceding_port_) -
      reinterpret_cast<char*>(&preceding_node_)) + sizeof(preceding_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_Node_InputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 preceding_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preceding_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 preceding_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          preceding_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostGraphDef_Node_InputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node.InputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 preceding_node = 1;
  if (this->preceding_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_preceding_node(), target);
  }

  // int32 preceding_port = 2;
  if (this->preceding_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_preceding_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node.InputInfo)
  return target;
}

size_t CostGraphDef_Node_InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node.InputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 preceding_node = 1;
  if (this->preceding_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preceding_node());
  }

  // int32 preceding_port = 2;
  if (this->preceding_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preceding_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostGraphDef_Node_InputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CostGraphDef_Node_InputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostGraphDef_Node_InputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.Node.InputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.Node.InputInfo)
    MergeFrom(*source);
  }
}

void CostGraphDef_Node_InputInfo::MergeFrom(const CostGraphDef_Node_InputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preceding_node() != 0) {
    _internal_set_preceding_node(from._internal_preceding_node());
  }
  if (from.preceding_port() != 0) {
    _internal_set_preceding_port(from._internal_preceding_port());
  }
}

void CostGraphDef_Node_InputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_Node_InputInfo::CopyFrom(const CostGraphDef_Node_InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node_InputInfo::IsInitialized() const {
  return true;
}

void CostGraphDef_Node_InputInfo::InternalSwap(CostGraphDef_Node_InputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_InputInfo, preceding_port_)
      + sizeof(CostGraphDef_Node_InputInfo::preceding_port_)
      - PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_InputInfo, preceding_node_)>(
          reinterpret_cast<char*>(&preceding_node_),
          reinterpret_cast<char*>(&other->preceding_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_Node_InputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CostGraphDef_Node_OutputInfo::InitAsDefaultInstance() {
  ::tensorflow::_CostGraphDef_Node_OutputInfo_default_instance_._instance.get_mutable()->shape_ = const_cast< ::tensorflow::TensorShapeProto*>(
      ::tensorflow::TensorShapeProto::internal_default_instance());
}
class CostGraphDef_Node_OutputInfo::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const CostGraphDef_Node_OutputInfo* msg);
};

const ::tensorflow::TensorShapeProto&
CostGraphDef_Node_OutputInfo::_Internal::shape(const CostGraphDef_Node_OutputInfo* msg) {
  return *msg->shape_;
}
void CostGraphDef_Node_OutputInfo::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}
CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(const CostGraphDef_Node_OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::tensorflow::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&size_)) + sizeof(dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}

void CostGraphDef_Node_OutputInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  ::memset(&shape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

CostGraphDef_Node_OutputInfo::~CostGraphDef_Node_OutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node.OutputInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostGraphDef_Node_OutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}

void CostGraphDef_Node_OutputInfo::ArenaDtor(void* object) {
  CostGraphDef_Node_OutputInfo* _this = reinterpret_cast< CostGraphDef_Node_OutputInfo* >(object);
  (void)_this;
}
void CostGraphDef_Node_OutputInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostGraphDef_Node_OutputInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostGraphDef_Node_OutputInfo& CostGraphDef_Node_OutputInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostGraphDef_Node_OutputInfo_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CostGraphDef_Node_OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dtype_) -
      reinterpret_cast<char*>(&size_)) + sizeof(dtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_Node_OutputInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 alias_input_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          alias_input_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostGraphDef_Node_OutputInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node.OutputInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // int64 alias_input_port = 2;
  if (this->alias_input_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_alias_input_port(), target);
  }

  // .tensorflow.TensorShapeProto shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // .tensorflow.DataType dtype = 4;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node.OutputInfo)
  return target;
}

size_t CostGraphDef_Node_OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node.OutputInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // int64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int64 alias_input_port = 2;
  if (this->alias_input_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_alias_input_port());
  }

  // .tensorflow.DataType dtype = 4;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostGraphDef_Node_OutputInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CostGraphDef_Node_OutputInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostGraphDef_Node_OutputInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.Node.OutputInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.Node.OutputInfo)
    MergeFrom(*source);
  }
}

void CostGraphDef_Node_OutputInfo::MergeFrom(const CostGraphDef_Node_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.alias_input_port() != 0) {
    _internal_set_alias_input_port(from._internal_alias_input_port());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void CostGraphDef_Node_OutputInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_Node_OutputInfo::CopyFrom(const CostGraphDef_Node_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node_OutputInfo::IsInitialized() const {
  return true;
}

void CostGraphDef_Node_OutputInfo::InternalSwap(CostGraphDef_Node_OutputInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, dtype_)
      + sizeof(CostGraphDef_Node_OutputInfo::dtype_)
      - PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_Node_OutputInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CostGraphDef_Node::InitAsDefaultInstance() {
}
class CostGraphDef_Node::_Internal {
 public:
};

CostGraphDef_Node::CostGraphDef_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_info_(arena),
  output_info_(arena),
  control_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node)
}
CostGraphDef_Node::CostGraphDef_Node(const CostGraphDef_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_info_(from.input_info_),
      output_info_(from.output_info_),
      control_input_(from.control_input_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device().empty()) {
    device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device(),
      GetArena());
  }
  ::memcpy(&temporary_memory_size_, &from.temporary_memory_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_persistent_memory_size_) -
    reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(device_persistent_memory_size_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node)
}

void CostGraphDef_Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&temporary_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_size_) -
      reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(device_persistent_memory_size_));
}

CostGraphDef_Node::~CostGraphDef_Node() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostGraphDef_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CostGraphDef_Node::ArenaDtor(void* object) {
  CostGraphDef_Node* _this = reinterpret_cast< CostGraphDef_Node* >(object);
  (void)_this;
}
void CostGraphDef_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostGraphDef_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostGraphDef_Node& CostGraphDef_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostGraphDef_Node_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CostGraphDef_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_info_.Clear();
  output_info_.Clear();
  control_input_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&temporary_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_persistent_memory_size_) -
      reinterpret_cast<char*>(&temporary_memory_size_)) + sizeof(device_persistent_memory_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CostGraphDef.Node.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CostGraphDef.Node.device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 temporary_memory_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          temporary_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_final = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 control_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_control_input(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_control_input(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compute_cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          compute_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 host_temp_memory_size = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          host_temp_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 device_temp_memory_size = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          device_temp_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 persistent_memory_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          persistent_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compute_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          memory_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 device_persistent_memory_size = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          device_persistent_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool inaccurate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          inaccurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostGraphDef_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string device = 2;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.device");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device(), target);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_input_info(i), target, stream);
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_output_info(i), target, stream);
  }

  // int64 temporary_memory_size = 6;
  if (this->temporary_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_temporary_memory_size(), target);
  }

  // bool is_final = 7;
  if (this->is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_final(), target);
  }

  // repeated int32 control_input = 8;
  {
    int byte_size = _control_input_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_control_input(), byte_size, target);
    }
  }

  // int64 compute_cost = 9;
  if (this->compute_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_compute_cost(), target);
  }

  // int64 host_temp_memory_size = 10 [deprecated = true];
  if (this->host_temp_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_host_temp_memory_size(), target);
  }

  // int64 device_temp_memory_size = 11 [deprecated = true];
  if (this->device_temp_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_device_temp_memory_size(), target);
  }

  // int64 persistent_memory_size = 12;
  if (this->persistent_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_persistent_memory_size(), target);
  }

  // int64 compute_time = 14;
  if (this->compute_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_compute_time(), target);
  }

  // int64 memory_time = 15;
  if (this->memory_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_memory_time(), target);
  }

  // int64 device_persistent_memory_size = 16 [deprecated = true];
  if (this->device_persistent_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_device_persistent_memory_size(), target);
  }

  // bool inaccurate = 17;
  if (this->inaccurate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_inaccurate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node)
  return target;
}

size_t CostGraphDef_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  total_size += 1UL * this->_internal_input_info_size();
  for (const auto& msg : this->input_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  total_size += 1UL * this->_internal_output_info_size();
  for (const auto& msg : this->output_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 control_input = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->control_input_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _control_input_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string device = 2;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // int64 temporary_memory_size = 6;
  if (this->temporary_memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_temporary_memory_size());
  }

  // int64 compute_cost = 9;
  if (this->compute_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compute_cost());
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool is_final = 7;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // bool inaccurate = 17;
  if (this->inaccurate() != 0) {
    total_size += 2 + 1;
  }

  // int64 host_temp_memory_size = 10 [deprecated = true];
  if (this->host_temp_memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_host_temp_memory_size());
  }

  // int64 device_temp_memory_size = 11 [deprecated = true];
  if (this->device_temp_memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_device_temp_memory_size());
  }

  // int64 persistent_memory_size = 12;
  if (this->persistent_memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_persistent_memory_size());
  }

  // int64 compute_time = 14;
  if (this->compute_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compute_time());
  }

  // int64 memory_time = 15;
  if (this->memory_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_time());
  }

  // int64 device_persistent_memory_size = 16 [deprecated = true];
  if (this->device_persistent_memory_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_device_persistent_memory_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostGraphDef_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const CostGraphDef_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostGraphDef_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.Node)
    MergeFrom(*source);
  }
}

void CostGraphDef_Node::MergeFrom(const CostGraphDef_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_info_.MergeFrom(from.input_info_);
  output_info_.MergeFrom(from.output_info_);
  control_input_.MergeFrom(from.control_input_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.device().size() > 0) {
    _internal_set_device(from._internal_device());
  }
  if (from.temporary_memory_size() != 0) {
    _internal_set_temporary_memory_size(from._internal_temporary_memory_size());
  }
  if (from.compute_cost() != 0) {
    _internal_set_compute_cost(from._internal_compute_cost());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_final() != 0) {
    _internal_set_is_final(from._internal_is_final());
  }
  if (from.inaccurate() != 0) {
    _internal_set_inaccurate(from._internal_inaccurate());
  }
  if (from.host_temp_memory_size() != 0) {
    _internal_set_host_temp_memory_size(from._internal_host_temp_memory_size());
  }
  if (from.device_temp_memory_size() != 0) {
    _internal_set_device_temp_memory_size(from._internal_device_temp_memory_size());
  }
  if (from.persistent_memory_size() != 0) {
    _internal_set_persistent_memory_size(from._internal_persistent_memory_size());
  }
  if (from.compute_time() != 0) {
    _internal_set_compute_time(from._internal_compute_time());
  }
  if (from.memory_time() != 0) {
    _internal_set_memory_time(from._internal_memory_time());
  }
  if (from.device_persistent_memory_size() != 0) {
    _internal_set_device_persistent_memory_size(from._internal_device_persistent_memory_size());
  }
}

void CostGraphDef_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_Node::CopyFrom(const CostGraphDef_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node::IsInitialized() const {
  return true;
}

void CostGraphDef_Node::InternalSwap(CostGraphDef_Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_info_.InternalSwap(&other->input_info_);
  output_info_.InternalSwap(&other->output_info_);
  control_input_.InternalSwap(&other->control_input_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostGraphDef_Node, device_persistent_memory_size_)
      + sizeof(CostGraphDef_Node::device_persistent_memory_size_)
      - PROTOBUF_FIELD_OFFSET(CostGraphDef_Node, temporary_memory_size_)>(
          reinterpret_cast<char*>(&temporary_memory_size_),
          reinterpret_cast<char*>(&other->temporary_memory_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CostGraphDef_AggregatedCost::InitAsDefaultInstance() {
}
class CostGraphDef_AggregatedCost::_Internal {
 public:
};

CostGraphDef_AggregatedCost::CostGraphDef_AggregatedCost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.AggregatedCost)
}
CostGraphDef_AggregatedCost::CostGraphDef_AggregatedCost(const CostGraphDef_AggregatedCost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dimension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dimension().empty()) {
    dimension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dimension(),
      GetArena());
  }
  cost_ = from.cost_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.AggregatedCost)
}

void CostGraphDef_AggregatedCost::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  dimension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_ = 0;
}

CostGraphDef_AggregatedCost::~CostGraphDef_AggregatedCost() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.AggregatedCost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostGraphDef_AggregatedCost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dimension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CostGraphDef_AggregatedCost::ArenaDtor(void* object) {
  CostGraphDef_AggregatedCost* _this = reinterpret_cast< CostGraphDef_AggregatedCost* >(object);
  (void)_this;
}
void CostGraphDef_AggregatedCost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostGraphDef_AggregatedCost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostGraphDef_AggregatedCost& CostGraphDef_AggregatedCost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostGraphDef_AggregatedCost_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CostGraphDef_AggregatedCost::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.AggregatedCost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_AggregatedCost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dimension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.CostGraphDef.AggregatedCost.dimension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostGraphDef_AggregatedCost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.AggregatedCost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float cost = 1;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_cost(), target);
  }

  // string dimension = 2;
  if (this->dimension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dimension().data(), static_cast<int>(this->_internal_dimension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.AggregatedCost.dimension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.AggregatedCost)
  return target;
}

size_t CostGraphDef_AggregatedCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.AggregatedCost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension = 2;
  if (this->dimension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dimension());
  }

  // float cost = 1;
  if (!(this->cost() <= 0 && this->cost() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostGraphDef_AggregatedCost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.AggregatedCost)
  GOOGLE_DCHECK_NE(&from, this);
  const CostGraphDef_AggregatedCost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostGraphDef_AggregatedCost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.AggregatedCost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.AggregatedCost)
    MergeFrom(*source);
  }
}

void CostGraphDef_AggregatedCost::MergeFrom(const CostGraphDef_AggregatedCost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.AggregatedCost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension().size() > 0) {
    _internal_set_dimension(from._internal_dimension());
  }
  if (!(from.cost() <= 0 && from.cost() >= 0)) {
    _internal_set_cost(from._internal_cost());
  }
}

void CostGraphDef_AggregatedCost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.AggregatedCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_AggregatedCost::CopyFrom(const CostGraphDef_AggregatedCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.AggregatedCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_AggregatedCost::IsInitialized() const {
  return true;
}

void CostGraphDef_AggregatedCost::InternalSwap(CostGraphDef_AggregatedCost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dimension_.Swap(&other->dimension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cost_, other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_AggregatedCost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CostGraphDef::InitAsDefaultInstance() {
}
class CostGraphDef::_Internal {
 public:
};

CostGraphDef::CostGraphDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena),
  cost_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef)
}
CostGraphDef::CostGraphDef(const CostGraphDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_),
      cost_(from.cost_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef)
}

void CostGraphDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
}

CostGraphDef::~CostGraphDef() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CostGraphDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CostGraphDef::ArenaDtor(void* object) {
  CostGraphDef* _this = reinterpret_cast< CostGraphDef* >(object);
  (void)_this;
}
void CostGraphDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CostGraphDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CostGraphDef& CostGraphDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CostGraphDef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void CostGraphDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  cost_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.CostGraphDef.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.CostGraphDef.AggregatedCost cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cost(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CostGraphDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.CostGraphDef.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  // repeated .tensorflow.CostGraphDef.AggregatedCost cost = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cost_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cost(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef)
  return target;
}

size_t CostGraphDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CostGraphDef.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.CostGraphDef.AggregatedCost cost = 2;
  total_size += 1UL * this->_internal_cost_size();
  for (const auto& msg : this->cost_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CostGraphDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  const CostGraphDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CostGraphDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef)
    MergeFrom(*source);
  }
}

void CostGraphDef::MergeFrom(const CostGraphDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  cost_.MergeFrom(from.cost_);
}

void CostGraphDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef::CopyFrom(const CostGraphDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef::IsInitialized() const {
  return true;
}

void CostGraphDef::InternalSwap(CostGraphDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
  cost_.InternalSwap(&other->cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_Node_InputInfo* Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_Node_InputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_Node_InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_Node_OutputInfo* Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_Node_OutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_Node_OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_Node* Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_AggregatedCost* Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_AggregatedCost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_AggregatedCost >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef* Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
