// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#include "tensorflow/core/protobuf/rewriter_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifierConfig_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto;
namespace tensorflow {
class AutoParallelOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoParallelOptions> _instance;
} _AutoParallelOptions_default_instance_;
class ScopedAllocatorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScopedAllocatorOptions> _instance;
} _ScopedAllocatorOptions_default_instance_;
class RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse> _instance;
} _RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_;
class RewriterConfig_CustomGraphOptimizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewriterConfig_CustomGraphOptimizer> _instance;
} _RewriterConfig_CustomGraphOptimizer_default_instance_;
class RewriterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewriterConfig> _instance;
} _RewriterConfig_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_AutoParallelOptions_default_instance_;
    new (ptr) ::tensorflow::AutoParallelOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::AutoParallelOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RewriterConfig_default_instance_;
    new (ptr) ::tensorflow::RewriterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RewriterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {
      &scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
      &scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
      &scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
      &scc_info_VerifierConfig_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RewriterConfig_CustomGraphOptimizer_default_instance_;
    new (ptr) ::tensorflow::RewriterConfig_CustomGraphOptimizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::RewriterConfig_CustomGraphOptimizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {
      &scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse();
  }
  ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {
      &scc_info_AttrValue_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_ScopedAllocatorOptions_default_instance_;
    new (ptr) ::tensorflow::ScopedAllocatorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::ScopedAllocatorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutoParallelOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutoParallelOptions, enable_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AutoParallelOptions, num_replicas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ScopedAllocatorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ScopedAllocatorOptions, enable_op_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig_CustomGraphOptimizer, parameter_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, layout_optimizer_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, constant_folding_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, shape_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, remapping_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, common_subgraph_elimination_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, arithmetic_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, dependency_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, loop_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, function_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, debug_stripper_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, disable_model_pruning_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, scoped_allocator_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, pin_to_host_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, implementation_selector_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, auto_mixed_precision_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, auto_mixed_precision_mkl_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, disable_meta_optimizer_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, meta_optimizer_iterations_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, min_graph_nodes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, memory_optimization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, memory_optimizer_target_node_name_scope_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, meta_optimizer_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, auto_parallel_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, fail_on_optimizer_errors_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, scoped_allocator_opts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, optimizers_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, custom_optimizers_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, inter_optimizer_verifier_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RewriterConfig, post_optimization_verifier_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::AutoParallelOptions)},
  { 7, -1, sizeof(::tensorflow::ScopedAllocatorOptions)},
  { 13, 20, sizeof(::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse)},
  { 22, -1, sizeof(::tensorflow::RewriterConfig_CustomGraphOptimizer)},
  { 29, -1, sizeof(::tensorflow::RewriterConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_AutoParallelOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_ScopedAllocatorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RewriterConfig_CustomGraphOptimizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_RewriterConfig_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.tensorflow/core/protobuf/rewriter_conf"
  "ig.proto\022\ntensorflow\032*tensorflow/core/fr"
  "amework/attr_value.proto\032.tensorflow/cor"
  "e/protobuf/verifier_config.proto\";\n\023Auto"
  "ParallelOptions\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_r"
  "eplicas\030\002 \001(\005\"+\n\026ScopedAllocatorOptions\022"
  "\021\n\tenable_op\030\001 \003(\t\"\225\021\n\016RewriterConfig\022;\n"
  "\020layout_optimizer\030\001 \001(\0162!.tensorflow.Rew"
  "riterConfig.Toggle\022;\n\020constant_folding\030\003"
  " \001(\0162!.tensorflow.RewriterConfig.Toggle\022"
  "=\n\022shape_optimization\030\r \001(\0162!.tensorflow"
  ".RewriterConfig.Toggle\0224\n\tremapping\030\016 \001("
  "\0162!.tensorflow.RewriterConfig.Toggle\022F\n\033"
  "common_subgraph_elimination\030\030 \001(\0162!.tens"
  "orflow.RewriterConfig.Toggle\022B\n\027arithmet"
  "ic_optimization\030\007 \001(\0162!.tensorflow.Rewri"
  "terConfig.Toggle\022B\n\027dependency_optimizat"
  "ion\030\010 \001(\0162!.tensorflow.RewriterConfig.To"
  "ggle\022<\n\021loop_optimization\030\t \001(\0162!.tensor"
  "flow.RewriterConfig.Toggle\022@\n\025function_o"
  "ptimization\030\n \001(\0162!.tensorflow.RewriterC"
  "onfig.Toggle\0229\n\016debug_stripper\030\013 \001(\0162!.t"
  "ensorflow.RewriterConfig.Toggle\022\035\n\025disab"
  "le_model_pruning\030\002 \001(\010\022H\n\035scoped_allocat"
  "or_optimization\030\017 \001(\0162!.tensorflow.Rewri"
  "terConfig.Toggle\022C\n\030pin_to_host_optimiza"
  "tion\030\022 \001(\0162!.tensorflow.RewriterConfig.T"
  "oggle\022B\n\027implementation_selector\030\026 \001(\0162!"
  ".tensorflow.RewriterConfig.Toggle\022\?\n\024aut"
  "o_mixed_precision\030\027 \001(\0162!.tensorflow.Rew"
  "riterConfig.Toggle\022C\n\030auto_mixed_precisi"
  "on_mkl\030\031 \001(\0162!.tensorflow.RewriterConfig"
  ".Toggle\022\036\n\026disable_meta_optimizer\030\023 \001(\010\022"
  "O\n\031meta_optimizer_iterations\030\014 \001(\0162,.ten"
  "sorflow.RewriterConfig.NumIterationsType"
  "\022\027\n\017min_graph_nodes\030\021 \001(\005\022B\n\023memory_opti"
  "mization\030\004 \001(\0162%.tensorflow.RewriterConf"
  "ig.MemOptType\022/\n\'memory_optimizer_target"
  "_node_name_scope\030\006 \001(\t\022!\n\031meta_optimizer"
  "_timeout_ms\030\024 \001(\003\0226\n\rauto_parallel\030\005 \001(\013"
  "2\037.tensorflow.AutoParallelOptions\022 \n\030fai"
  "l_on_optimizer_errors\030\025 \001(\010\022A\n\025scoped_al"
  "locator_opts\030\020 \001(\0132\".tensorflow.ScopedAl"
  "locatorOptions\022\022\n\noptimizers\030d \003(\t\022K\n\021cu"
  "stom_optimizers\030\310\001 \003(\0132/.tensorflow.Rewr"
  "iterConfig.CustomGraphOptimizer\022D\n\037inter"
  "_optimizer_verifier_config\030\254\002 \001(\0132\032.tens"
  "orflow.VerifierConfig\022F\n!post_optimizati"
  "on_verifier_config\030\255\002 \001(\0132\032.tensorflow.V"
  "erifierConfig\032\312\001\n\024CustomGraphOptimizer\022\014"
  "\n\004name\030\001 \001(\t\022X\n\rparameter_map\030\002 \003(\0132A.te"
  "nsorflow.RewriterConfig.CustomGraphOptim"
  "izer.ParameterMapEntry\032J\n\021ParameterMapEn"
  "try\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.tensor"
  "flow.AttrValue:\0028\001\"6\n\006Toggle\022\013\n\007DEFAULT\020"
  "\000\022\006\n\002ON\020\001\022\007\n\003OFF\020\002\022\016\n\nAGGRESSIVE\020\003\"<\n\021Nu"
  "mIterationsType\022\025\n\021DEFAULT_NUM_ITERS\020\000\022\007"
  "\n\003ONE\020\001\022\007\n\003TWO\020\002\"\237\001\n\nMemOptType\022\023\n\017DEFAU"
  "LT_MEM_OPT\020\000\022\016\n\nNO_MEM_OPT\020\001\022\n\n\006MANUAL\020\002"
  "\022\027\n\023SWAPPING_HEURISTICS\020\004\022\034\n\030RECOMPUTATI"
  "ON_HEURISTICS\020\005\022\031\n\025SCHEDULING_HEURISTICS"
  "\020\006\022\016\n\nHEURISTICS\020\003B\177\n\030org.tensorflow.fra"
  "meworkB\024RewriterConfigProtosP\001ZHgithub.c"
  "om/tensorflow/tensorflow/tensorflow/go/c"
  "ore/core_protos_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fverifier_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_sccs[5] = {
  &scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
  &scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto, "tensorflow/core/protobuf/rewriter_config.proto", 2595,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto, 5, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto)), true);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewriterConfig_Toggle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[0];
}
bool RewriterConfig_Toggle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewriterConfig_Toggle RewriterConfig::DEFAULT;
constexpr RewriterConfig_Toggle RewriterConfig::ON;
constexpr RewriterConfig_Toggle RewriterConfig::OFF;
constexpr RewriterConfig_Toggle RewriterConfig::AGGRESSIVE;
constexpr RewriterConfig_Toggle RewriterConfig::Toggle_MIN;
constexpr RewriterConfig_Toggle RewriterConfig::Toggle_MAX;
constexpr int RewriterConfig::Toggle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewriterConfig_NumIterationsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[1];
}
bool RewriterConfig_NumIterationsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewriterConfig_NumIterationsType RewriterConfig::DEFAULT_NUM_ITERS;
constexpr RewriterConfig_NumIterationsType RewriterConfig::ONE;
constexpr RewriterConfig_NumIterationsType RewriterConfig::TWO;
constexpr RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MIN;
constexpr RewriterConfig_NumIterationsType RewriterConfig::NumIterationsType_MAX;
constexpr int RewriterConfig::NumIterationsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewriterConfig_MemOptType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto[2];
}
bool RewriterConfig_MemOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewriterConfig_MemOptType RewriterConfig::DEFAULT_MEM_OPT;
constexpr RewriterConfig_MemOptType RewriterConfig::NO_MEM_OPT;
constexpr RewriterConfig_MemOptType RewriterConfig::MANUAL;
constexpr RewriterConfig_MemOptType RewriterConfig::SWAPPING_HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::RECOMPUTATION_HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::SCHEDULING_HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::HEURISTICS;
constexpr RewriterConfig_MemOptType RewriterConfig::MemOptType_MIN;
constexpr RewriterConfig_MemOptType RewriterConfig::MemOptType_MAX;
constexpr int RewriterConfig::MemOptType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AutoParallelOptions::InitAsDefaultInstance() {
}
class AutoParallelOptions::_Internal {
 public:
};

AutoParallelOptions::AutoParallelOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(const AutoParallelOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_replicas_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
}

AutoParallelOptions::~AutoParallelOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.AutoParallelOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoParallelOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoParallelOptions::ArenaDtor(void* object) {
  AutoParallelOptions* _this = reinterpret_cast< AutoParallelOptions* >(object);
  (void)_this;
}
void AutoParallelOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoParallelOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoParallelOptions& AutoParallelOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoParallelOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AutoParallelOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutoParallelOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoParallelOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_replicas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoParallelOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutoParallelOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_replicas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutoParallelOptions)
  return target;
}

size_t AutoParallelOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutoParallelOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_replicas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoParallelOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoParallelOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoParallelOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutoParallelOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutoParallelOptions)
    MergeFrom(*source);
  }
}

void AutoParallelOptions::MergeFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.num_replicas() != 0) {
    _internal_set_num_replicas(from._internal_num_replicas());
  }
}

void AutoParallelOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoParallelOptions::CopyFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoParallelOptions::IsInitialized() const {
  return true;
}

void AutoParallelOptions::InternalSwap(AutoParallelOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoParallelOptions, num_replicas_)
      + sizeof(AutoParallelOptions::num_replicas_)
      - PROTOBUF_FIELD_OFFSET(AutoParallelOptions, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoParallelOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScopedAllocatorOptions::InitAsDefaultInstance() {
}
class ScopedAllocatorOptions::_Internal {
 public:
};

ScopedAllocatorOptions::ScopedAllocatorOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  enable_op_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ScopedAllocatorOptions)
}
ScopedAllocatorOptions::ScopedAllocatorOptions(const ScopedAllocatorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enable_op_(from.enable_op_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ScopedAllocatorOptions)
}

void ScopedAllocatorOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
}

ScopedAllocatorOptions::~ScopedAllocatorOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ScopedAllocatorOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScopedAllocatorOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScopedAllocatorOptions::ArenaDtor(void* object) {
  ScopedAllocatorOptions* _this = reinterpret_cast< ScopedAllocatorOptions* >(object);
  (void)_this;
}
void ScopedAllocatorOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScopedAllocatorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScopedAllocatorOptions& ScopedAllocatorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScopedAllocatorOptions_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ScopedAllocatorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ScopedAllocatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_op_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScopedAllocatorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string enable_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_enable_op();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.ScopedAllocatorOptions.enable_op"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScopedAllocatorOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ScopedAllocatorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  for (int i = 0, n = this->_internal_enable_op_size(); i < n; i++) {
    const auto& s = this->_internal_enable_op(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ScopedAllocatorOptions.enable_op");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ScopedAllocatorOptions)
  return target;
}

size_t ScopedAllocatorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ScopedAllocatorOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enable_op = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(enable_op_.size());
  for (int i = 0, n = enable_op_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      enable_op_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScopedAllocatorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.ScopedAllocatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ScopedAllocatorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScopedAllocatorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.ScopedAllocatorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.ScopedAllocatorOptions)
    MergeFrom(*source);
  }
}

void ScopedAllocatorOptions::MergeFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ScopedAllocatorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enable_op_.MergeFrom(from.enable_op_);
}

void ScopedAllocatorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScopedAllocatorOptions::CopyFrom(const ScopedAllocatorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ScopedAllocatorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScopedAllocatorOptions::IsInitialized() const {
  return true;
}

void ScopedAllocatorOptions::InternalSwap(ScopedAllocatorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  enable_op_.InternalSwap(&other->enable_op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScopedAllocatorOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse() {}
RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MergeFrom(const RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RewriterConfig_CustomGraphOptimizer::InitAsDefaultInstance() {
}
class RewriterConfig_CustomGraphOptimizer::_Internal {
 public:
};

void RewriterConfig_CustomGraphOptimizer::clear_parameter_map() {
  parameter_map_.Clear();
}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameter_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}
RewriterConfig_CustomGraphOptimizer::RewriterConfig_CustomGraphOptimizer(const RewriterConfig_CustomGraphOptimizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameter_map_.MergeFrom(from.parameter_map_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
}

void RewriterConfig_CustomGraphOptimizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RewriterConfig_CustomGraphOptimizer::~RewriterConfig_CustomGraphOptimizer() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig.CustomGraphOptimizer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewriterConfig_CustomGraphOptimizer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewriterConfig_CustomGraphOptimizer::ArenaDtor(void* object) {
  RewriterConfig_CustomGraphOptimizer* _this = reinterpret_cast< RewriterConfig_CustomGraphOptimizer* >(object);
  (void)_this;
}
void RewriterConfig_CustomGraphOptimizer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriterConfig_CustomGraphOptimizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewriterConfig_CustomGraphOptimizer& RewriterConfig_CustomGraphOptimizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewriterConfig_CustomGraphOptimizer_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RewriterConfig_CustomGraphOptimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_map_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriterConfig_CustomGraphOptimizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.RewriterConfig.CustomGraphOptimizer.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.AttrValue> parameter_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameter_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriterConfig_CustomGraphOptimizer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.CustomGraphOptimizer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  if (!this->_internal_parameter_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.RewriterConfig.CustomGraphOptimizer.ParameterMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameter_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameter_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->_internal_parameter_map().begin();
          it != this->_internal_parameter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->_internal_parameter_map().begin();
          it != this->_internal_parameter_map().end(); ++it) {
        target = RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig.CustomGraphOptimizer)
  return target;
}

size_t RewriterConfig_CustomGraphOptimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.AttrValue> parameter_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameter_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
      it = this->_internal_parameter_map().begin();
      it != this->_internal_parameter_map().end(); ++it) {
    total_size += RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig_CustomGraphOptimizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriterConfig_CustomGraphOptimizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig.CustomGraphOptimizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig.CustomGraphOptimizer)
    MergeFrom(*source);
  }
}

void RewriterConfig_CustomGraphOptimizer::MergeFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_map_.MergeFrom(from.parameter_map_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig_CustomGraphOptimizer::CopyFrom(const RewriterConfig_CustomGraphOptimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig.CustomGraphOptimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig_CustomGraphOptimizer::IsInitialized() const {
  return true;
}

void RewriterConfig_CustomGraphOptimizer::InternalSwap(RewriterConfig_CustomGraphOptimizer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameter_map_.Swap(&other->parameter_map_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriterConfig_CustomGraphOptimizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewriterConfig::InitAsDefaultInstance() {
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->auto_parallel_ = const_cast< ::tensorflow::AutoParallelOptions*>(
      ::tensorflow::AutoParallelOptions::internal_default_instance());
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->scoped_allocator_opts_ = const_cast< ::tensorflow::ScopedAllocatorOptions*>(
      ::tensorflow::ScopedAllocatorOptions::internal_default_instance());
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->inter_optimizer_verifier_config_ = const_cast< ::tensorflow::VerifierConfig*>(
      ::tensorflow::VerifierConfig::internal_default_instance());
  ::tensorflow::_RewriterConfig_default_instance_._instance.get_mutable()->post_optimization_verifier_config_ = const_cast< ::tensorflow::VerifierConfig*>(
      ::tensorflow::VerifierConfig::internal_default_instance());
}
class RewriterConfig::_Internal {
 public:
  static const ::tensorflow::AutoParallelOptions& auto_parallel(const RewriterConfig* msg);
  static const ::tensorflow::ScopedAllocatorOptions& scoped_allocator_opts(const RewriterConfig* msg);
  static const ::tensorflow::VerifierConfig& inter_optimizer_verifier_config(const RewriterConfig* msg);
  static const ::tensorflow::VerifierConfig& post_optimization_verifier_config(const RewriterConfig* msg);
};

const ::tensorflow::AutoParallelOptions&
RewriterConfig::_Internal::auto_parallel(const RewriterConfig* msg) {
  return *msg->auto_parallel_;
}
const ::tensorflow::ScopedAllocatorOptions&
RewriterConfig::_Internal::scoped_allocator_opts(const RewriterConfig* msg) {
  return *msg->scoped_allocator_opts_;
}
const ::tensorflow::VerifierConfig&
RewriterConfig::_Internal::inter_optimizer_verifier_config(const RewriterConfig* msg) {
  return *msg->inter_optimizer_verifier_config_;
}
const ::tensorflow::VerifierConfig&
RewriterConfig::_Internal::post_optimization_verifier_config(const RewriterConfig* msg) {
  return *msg->post_optimization_verifier_config_;
}
void RewriterConfig::clear_inter_optimizer_verifier_config() {
  if (GetArena() == nullptr && inter_optimizer_verifier_config_ != nullptr) {
    delete inter_optimizer_verifier_config_;
  }
  inter_optimizer_verifier_config_ = nullptr;
}
void RewriterConfig::clear_post_optimization_verifier_config() {
  if (GetArena() == nullptr && post_optimization_verifier_config_ != nullptr) {
    delete post_optimization_verifier_config_;
  }
  post_optimization_verifier_config_ = nullptr;
}
RewriterConfig::RewriterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  optimizers_(arena),
  custom_optimizers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(const RewriterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      optimizers_(from.optimizers_),
      custom_optimizers_(from.custom_optimizers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory_optimizer_target_node_name_scope().empty()) {
    memory_optimizer_target_node_name_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memory_optimizer_target_node_name_scope(),
      GetArena());
  }
  if (from._internal_has_auto_parallel()) {
    auto_parallel_ = new ::tensorflow::AutoParallelOptions(*from.auto_parallel_);
  } else {
    auto_parallel_ = nullptr;
  }
  if (from._internal_has_scoped_allocator_opts()) {
    scoped_allocator_opts_ = new ::tensorflow::ScopedAllocatorOptions(*from.scoped_allocator_opts_);
  } else {
    scoped_allocator_opts_ = nullptr;
  }
  if (from._internal_has_inter_optimizer_verifier_config()) {
    inter_optimizer_verifier_config_ = new ::tensorflow::VerifierConfig(*from.inter_optimizer_verifier_config_);
  } else {
    inter_optimizer_verifier_config_ = nullptr;
  }
  if (from._internal_has_post_optimization_verifier_config()) {
    post_optimization_verifier_config_ = new ::tensorflow::VerifierConfig(*from.post_optimization_verifier_config_);
  } else {
    post_optimization_verifier_config_ = nullptr;
  }
  ::memcpy(&layout_optimizer_, &from.layout_optimizer_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_mixed_precision_mkl_) -
    reinterpret_cast<char*>(&layout_optimizer_)) + sizeof(auto_mixed_precision_mkl_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  memory_optimizer_target_node_name_scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_parallel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_mixed_precision_mkl_) -
      reinterpret_cast<char*>(&auto_parallel_)) + sizeof(auto_mixed_precision_mkl_));
}

RewriterConfig::~RewriterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewriterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  memory_optimizer_target_node_name_scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auto_parallel_;
  if (this != internal_default_instance()) delete scoped_allocator_opts_;
  if (this != internal_default_instance()) delete inter_optimizer_verifier_config_;
  if (this != internal_default_instance()) delete post_optimization_verifier_config_;
}

void RewriterConfig::ArenaDtor(void* object) {
  RewriterConfig* _this = reinterpret_cast< RewriterConfig* >(object);
  (void)_this;
}
void RewriterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewriterConfig& RewriterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewriterConfig_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void RewriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optimizers_.Clear();
  custom_optimizers_.Clear();
  memory_optimizer_target_node_name_scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && auto_parallel_ != nullptr) {
    delete auto_parallel_;
  }
  auto_parallel_ = nullptr;
  if (GetArena() == nullptr && scoped_allocator_opts_ != nullptr) {
    delete scoped_allocator_opts_;
  }
  scoped_allocator_opts_ = nullptr;
  if (GetArena() == nullptr && inter_optimizer_verifier_config_ != nullptr) {
    delete inter_optimizer_verifier_config_;
  }
  inter_optimizer_verifier_config_ = nullptr;
  if (GetArena() == nullptr && post_optimization_verifier_config_ != nullptr) {
    delete post_optimization_verifier_config_;
  }
  post_optimization_verifier_config_ = nullptr;
  ::memset(&layout_optimizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_mixed_precision_mkl_) -
      reinterpret_cast<char*>(&layout_optimizer_)) + sizeof(auto_mixed_precision_mkl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_layout_optimizer(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // bool disable_model_pruning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_model_pruning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_constant_folding(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_memory_optimization(static_cast<::tensorflow::RewriterConfig_MemOptType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_parallel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memory_optimizer_target_node_name_scope = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_memory_optimizer_target_node_name_scope();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_arithmetic_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dependency_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_loop_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_function_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_debug_stripper(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_meta_optimizer_iterations(static_cast<::tensorflow::RewriterConfig_NumIterationsType>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shape_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle remapping = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_remapping(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scoped_allocator_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoped_allocator_opts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_graph_nodes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          min_graph_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pin_to_host_optimization(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // bool disable_meta_optimizer = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          disable_meta_optimizer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 meta_optimizer_timeout_ms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          meta_optimizer_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fail_on_optimizer_errors = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          fail_on_optimizer_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_implementation_selector(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_mixed_precision(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_common_subgraph_elimination(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_mixed_precision_mkl(static_cast<::tensorflow::RewriterConfig_Toggle>(val));
        } else goto handle_unusual;
        continue;
      // repeated string optimizers = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_optimizers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.RewriterConfig.optimizers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_custom_optimizers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1602>(ptr));
        } else goto handle_unusual;
        continue;
      // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_inter_optimizer_verifier_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_post_optimization_verifier_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_layout_optimizer(), target);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_model_pruning(), target);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_constant_folding(), target);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_memory_optimization(), target);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::auto_parallel(this), target, stream);
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory_optimizer_target_node_name_scope().data(), static_cast<int>(this->_internal_memory_optimizer_target_node_name_scope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_scope");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_memory_optimizer_target_node_name_scope(), target);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_arithmetic_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_dependency_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_loop_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_function_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_debug_stripper(), target);
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_meta_optimizer_iterations(), target);
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_shape_optimization(), target);
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_remapping(), target);
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_scoped_allocator_optimization(), target);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::scoped_allocator_opts(this), target, stream);
  }

  // int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_min_graph_nodes(), target);
  }

  // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_pin_to_host_optimization(), target);
  }

  // bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_disable_meta_optimizer(), target);
  }

  // int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_meta_optimizer_timeout_ms(), target);
  }

  // bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_fail_on_optimizer_errors(), target);
  }

  // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_implementation_selector(), target);
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_auto_mixed_precision(), target);
  }

  // .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  if (this->common_subgraph_elimination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_common_subgraph_elimination(), target);
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  if (this->auto_mixed_precision_mkl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_auto_mixed_precision_mkl(), target);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->_internal_optimizers_size(); i < n; i++) {
    const auto& s = this->_internal_optimizers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    target = stream->WriteString(100, s, target);
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_optimizers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, this->_internal_custom_optimizers(i), target, stream);
  }

  // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        300, _Internal::inter_optimizer_verifier_config(this), target, stream);
  }

  // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        301, _Internal::post_optimization_verifier_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig)
  return target;
}

size_t RewriterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string optimizers = 100;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(optimizers_.size());
  for (int i = 0, n = optimizers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      optimizers_.Get(i));
  }

  // repeated .tensorflow.RewriterConfig.CustomGraphOptimizer custom_optimizers = 200;
  total_size += 2UL * this->_internal_custom_optimizers_size();
  for (const auto& msg : this->custom_optimizers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string memory_optimizer_target_node_name_scope = 6;
  if (this->memory_optimizer_target_node_name_scope().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory_optimizer_target_node_name_scope());
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_parallel_);
  }

  // .tensorflow.ScopedAllocatorOptions scoped_allocator_opts = 16;
  if (this->has_scoped_allocator_opts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scoped_allocator_opts_);
  }

  // .tensorflow.VerifierConfig inter_optimizer_verifier_config = 300;
  if (this->has_inter_optimizer_verifier_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inter_optimizer_verifier_config_);
  }

  // .tensorflow.VerifierConfig post_optimization_verifier_config = 301;
  if (this->has_post_optimization_verifier_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_optimization_verifier_config_);
  }

  // .tensorflow.RewriterConfig.Toggle layout_optimizer = 1;
  if (this->layout_optimizer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layout_optimizer());
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_constant_folding());
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_memory_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_arithmetic_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle dependency_optimization = 8;
  if (this->dependency_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dependency_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle loop_optimization = 9;
  if (this->loop_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loop_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle function_optimization = 10;
  if (this->function_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_function_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle debug_stripper = 11;
  if (this->debug_stripper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_debug_stripper());
  }

  // .tensorflow.RewriterConfig.NumIterationsType meta_optimizer_iterations = 12;
  if (this->meta_optimizer_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_meta_optimizer_iterations());
  }

  // .tensorflow.RewriterConfig.Toggle shape_optimization = 13;
  if (this->shape_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shape_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle remapping = 14;
  if (this->remapping() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_remapping());
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_meta_optimizer = 19;
  if (this->disable_meta_optimizer() != 0) {
    total_size += 2 + 1;
  }

  // bool fail_on_optimizer_errors = 21;
  if (this->fail_on_optimizer_errors() != 0) {
    total_size += 2 + 1;
  }

  // .tensorflow.RewriterConfig.Toggle scoped_allocator_optimization = 15;
  if (this->scoped_allocator_optimization() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scoped_allocator_optimization());
  }

  // int32 min_graph_nodes = 17;
  if (this->min_graph_nodes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_graph_nodes());
  }

  // int64 meta_optimizer_timeout_ms = 20;
  if (this->meta_optimizer_timeout_ms() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_meta_optimizer_timeout_ms());
  }

  // .tensorflow.RewriterConfig.Toggle pin_to_host_optimization = 18;
  if (this->pin_to_host_optimization() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pin_to_host_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle implementation_selector = 22;
  if (this->implementation_selector() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_implementation_selector());
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision = 23;
  if (this->auto_mixed_precision() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_mixed_precision());
  }

  // .tensorflow.RewriterConfig.Toggle common_subgraph_elimination = 24;
  if (this->common_subgraph_elimination() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_common_subgraph_elimination());
  }

  // .tensorflow.RewriterConfig.Toggle auto_mixed_precision_mkl = 25;
  if (this->auto_mixed_precision_mkl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_mixed_precision_mkl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig)
    MergeFrom(*source);
  }
}

void RewriterConfig::MergeFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optimizers_.MergeFrom(from.optimizers_);
  custom_optimizers_.MergeFrom(from.custom_optimizers_);
  if (from.memory_optimizer_target_node_name_scope().size() > 0) {
    _internal_set_memory_optimizer_target_node_name_scope(from._internal_memory_optimizer_target_node_name_scope());
  }
  if (from.has_auto_parallel()) {
    _internal_mutable_auto_parallel()->::tensorflow::AutoParallelOptions::MergeFrom(from._internal_auto_parallel());
  }
  if (from.has_scoped_allocator_opts()) {
    _internal_mutable_scoped_allocator_opts()->::tensorflow::ScopedAllocatorOptions::MergeFrom(from._internal_scoped_allocator_opts());
  }
  if (from.has_inter_optimizer_verifier_config()) {
    _internal_mutable_inter_optimizer_verifier_config()->::tensorflow::VerifierConfig::MergeFrom(from._internal_inter_optimizer_verifier_config());
  }
  if (from.has_post_optimization_verifier_config()) {
    _internal_mutable_post_optimization_verifier_config()->::tensorflow::VerifierConfig::MergeFrom(from._internal_post_optimization_verifier_config());
  }
  if (from.layout_optimizer() != 0) {
    _internal_set_layout_optimizer(from._internal_layout_optimizer());
  }
  if (from.constant_folding() != 0) {
    _internal_set_constant_folding(from._internal_constant_folding());
  }
  if (from.memory_optimization() != 0) {
    _internal_set_memory_optimization(from._internal_memory_optimization());
  }
  if (from.arithmetic_optimization() != 0) {
    _internal_set_arithmetic_optimization(from._internal_arithmetic_optimization());
  }
  if (from.dependency_optimization() != 0) {
    _internal_set_dependency_optimization(from._internal_dependency_optimization());
  }
  if (from.loop_optimization() != 0) {
    _internal_set_loop_optimization(from._internal_loop_optimization());
  }
  if (from.function_optimization() != 0) {
    _internal_set_function_optimization(from._internal_function_optimization());
  }
  if (from.debug_stripper() != 0) {
    _internal_set_debug_stripper(from._internal_debug_stripper());
  }
  if (from.meta_optimizer_iterations() != 0) {
    _internal_set_meta_optimizer_iterations(from._internal_meta_optimizer_iterations());
  }
  if (from.shape_optimization() != 0) {
    _internal_set_shape_optimization(from._internal_shape_optimization());
  }
  if (from.remapping() != 0) {
    _internal_set_remapping(from._internal_remapping());
  }
  if (from.disable_model_pruning() != 0) {
    _internal_set_disable_model_pruning(from._internal_disable_model_pruning());
  }
  if (from.disable_meta_optimizer() != 0) {
    _internal_set_disable_meta_optimizer(from._internal_disable_meta_optimizer());
  }
  if (from.fail_on_optimizer_errors() != 0) {
    _internal_set_fail_on_optimizer_errors(from._internal_fail_on_optimizer_errors());
  }
  if (from.scoped_allocator_optimization() != 0) {
    _internal_set_scoped_allocator_optimization(from._internal_scoped_allocator_optimization());
  }
  if (from.min_graph_nodes() != 0) {
    _internal_set_min_graph_nodes(from._internal_min_graph_nodes());
  }
  if (from.meta_optimizer_timeout_ms() != 0) {
    _internal_set_meta_optimizer_timeout_ms(from._internal_meta_optimizer_timeout_ms());
  }
  if (from.pin_to_host_optimization() != 0) {
    _internal_set_pin_to_host_optimization(from._internal_pin_to_host_optimization());
  }
  if (from.implementation_selector() != 0) {
    _internal_set_implementation_selector(from._internal_implementation_selector());
  }
  if (from.auto_mixed_precision() != 0) {
    _internal_set_auto_mixed_precision(from._internal_auto_mixed_precision());
  }
  if (from.common_subgraph_elimination() != 0) {
    _internal_set_common_subgraph_elimination(from._internal_common_subgraph_elimination());
  }
  if (from.auto_mixed_precision_mkl() != 0) {
    _internal_set_auto_mixed_precision_mkl(from._internal_auto_mixed_precision_mkl());
  }
}

void RewriterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig::CopyFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig::IsInitialized() const {
  return true;
}

void RewriterConfig::InternalSwap(RewriterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  optimizers_.InternalSwap(&other->optimizers_);
  custom_optimizers_.InternalSwap(&other->custom_optimizers_);
  memory_optimizer_target_node_name_scope_.Swap(&other->memory_optimizer_target_node_name_scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriterConfig, auto_mixed_precision_mkl_)
      + sizeof(RewriterConfig::auto_mixed_precision_mkl_)
      - PROTOBUF_FIELD_OFFSET(RewriterConfig, auto_parallel_)>(
          reinterpret_cast<char*>(&auto_parallel_),
          reinterpret_cast<char*>(&other->auto_parallel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::AutoParallelOptions* Arena::CreateMaybeMessage< ::tensorflow::AutoParallelOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AutoParallelOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ScopedAllocatorOptions* Arena::CreateMaybeMessage< ::tensorflow::ScopedAllocatorOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ScopedAllocatorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RewriterConfig_CustomGraphOptimizer_ParameterMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RewriterConfig_CustomGraphOptimizer* Arena::CreateMaybeMessage< ::tensorflow::RewriterConfig_CustomGraphOptimizer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RewriterConfig_CustomGraphOptimizer >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RewriterConfig* Arena::CreateMaybeMessage< ::tensorflow::RewriterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RewriterConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
