// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug.proto

#include "tensorflow/core/protobuf/debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
namespace tensorflow {
class DebugTensorWatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugTensorWatch> _instance;
} _DebugTensorWatch_default_instance_;
class DebugOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugOptions> _instance;
} _DebugOptions_default_instance_;
class DebuggedSourceFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebuggedSourceFile> _instance;
} _DebuggedSourceFile_default_instance_;
class DebuggedSourceFilesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebuggedSourceFiles> _instance;
} _DebuggedSourceFiles_default_instance_;
}  // namespace tensorflow
static void InitDefaultsscc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebugOptions_default_instance_;
    new (ptr) ::tensorflow::DebugOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebugOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto}, {
      &scc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,}};

static void InitDefaultsscc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebugTensorWatch_default_instance_;
    new (ptr) ::tensorflow::DebugTensorWatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebugTensorWatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto}, {}};

static void InitDefaultsscc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebuggedSourceFile_default_instance_;
    new (ptr) ::tensorflow::DebuggedSourceFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebuggedSourceFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto}, {}};

static void InitDefaultsscc_info_DebuggedSourceFiles_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::_DebuggedSourceFiles_default_instance_;
    new (ptr) ::tensorflow::DebuggedSourceFiles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::DebuggedSourceFiles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebuggedSourceFiles_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebuggedSourceFiles_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto}, {
      &scc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, output_slot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, debug_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, debug_urls_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, tolerate_debug_op_creation_failures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, debug_tensor_watch_opts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, global_step_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, reset_disk_byte_usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, host_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, file_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, last_modified_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFiles, source_files_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::DebugTensorWatch)},
  { 10, -1, sizeof(::tensorflow::DebugOptions)},
  { 18, -1, sizeof(::tensorflow::DebuggedSourceFile)},
  { 28, -1, sizeof(::tensorflow::DebuggedSourceFiles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebugTensorWatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebugOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebuggedSourceFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::_DebuggedSourceFiles_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$tensorflow/core/protobuf/debug.proto\022\n"
  "tensorflow\"\216\001\n\020DebugTensorWatch\022\021\n\tnode_"
  "name\030\001 \001(\t\022\023\n\013output_slot\030\002 \001(\005\022\021\n\tdebug"
  "_ops\030\003 \003(\t\022\022\n\ndebug_urls\030\004 \003(\t\022+\n#tolera"
  "te_debug_op_creation_failures\030\005 \001(\010\"\201\001\n\014"
  "DebugOptions\022=\n\027debug_tensor_watch_opts\030"
  "\004 \003(\0132\034.tensorflow.DebugTensorWatch\022\023\n\013g"
  "lobal_step\030\n \001(\003\022\035\n\025reset_disk_byte_usag"
  "e\030\013 \001(\010\"j\n\022DebuggedSourceFile\022\014\n\004host\030\001 "
  "\001(\t\022\021\n\tfile_path\030\002 \001(\t\022\025\n\rlast_modified\030"
  "\003 \001(\003\022\r\n\005bytes\030\004 \001(\003\022\r\n\005lines\030\005 \003(\t\"K\n\023D"
  "ebuggedSourceFiles\0224\n\014source_files\030\001 \003(\013"
  "2\036.tensorflow.DebuggedSourceFileBv\n\030org."
  "tensorflow.frameworkB\013DebugProtosP\001ZHgit"
  "hub.com/tensorflow/tensorflow/tensorflow"
  "/go/core/core_protos_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_sccs[4] = {
  &scc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,
  &scc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,
  &scc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,
  &scc_info_DebuggedSourceFiles_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto, "tensorflow/core/protobuf/debug.proto", 640,
  &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_sccs, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto::offsets,
  file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto, 4, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto, file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto)), true);
namespace tensorflow {

// ===================================================================

void DebugTensorWatch::InitAsDefaultInstance() {
}
class DebugTensorWatch::_Internal {
 public:
};

DebugTensorWatch::DebugTensorWatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  debug_ops_(arena),
  debug_urls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugTensorWatch)
}
DebugTensorWatch::DebugTensorWatch(const DebugTensorWatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      debug_ops_(from.debug_ops_),
      debug_urls_(from.debug_urls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_name(),
      GetArena());
  }
  ::memcpy(&output_slot_, &from.output_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&tolerate_debug_op_creation_failures_) -
    reinterpret_cast<char*>(&output_slot_)) + sizeof(tolerate_debug_op_creation_failures_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugTensorWatch)
}

void DebugTensorWatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&output_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tolerate_debug_op_creation_failures_) -
      reinterpret_cast<char*>(&output_slot_)) + sizeof(tolerate_debug_op_creation_failures_));
}

DebugTensorWatch::~DebugTensorWatch() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugTensorWatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugTensorWatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugTensorWatch::ArenaDtor(void* object) {
  DebugTensorWatch* _this = reinterpret_cast< DebugTensorWatch* >(object);
  (void)_this;
}
void DebugTensorWatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugTensorWatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugTensorWatch& DebugTensorWatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugTensorWatch_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  return *internal_default_instance();
}


void DebugTensorWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugTensorWatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debug_ops_.Clear();
  debug_urls_.Clear();
  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&output_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tolerate_debug_op_creation_failures_) -
      reinterpret_cast<char*>(&output_slot_)) + sizeof(tolerate_debug_op_creation_failures_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugTensorWatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugTensorWatch.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string debug_ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_debug_ops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugTensorWatch.debug_ops"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string debug_urls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_debug_urls();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebugTensorWatch.debug_urls"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool tolerate_debug_op_creation_failures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tolerate_debug_op_creation_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugTensorWatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugTensorWatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // int32 output_slot = 2;
  if (this->output_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_slot(), target);
  }

  // repeated string debug_ops = 3;
  for (int i = 0, n = this->_internal_debug_ops_size(); i < n; i++) {
    const auto& s = this->_internal_debug_ops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_ops");
    target = stream->WriteString(3, s, target);
  }

  // repeated string debug_urls = 4;
  for (int i = 0, n = this->_internal_debug_urls_size(); i < n; i++) {
    const auto& s = this->_internal_debug_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_urls");
    target = stream->WriteString(4, s, target);
  }

  // bool tolerate_debug_op_creation_failures = 5;
  if (this->tolerate_debug_op_creation_failures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_tolerate_debug_op_creation_failures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugTensorWatch)
  return target;
}

size_t DebugTensorWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugTensorWatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string debug_ops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(debug_ops_.size());
  for (int i = 0, n = debug_ops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      debug_ops_.Get(i));
  }

  // repeated string debug_urls = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(debug_urls_.size());
  for (int i = 0, n = debug_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      debug_urls_.Get(i));
  }

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // int32 output_slot = 2;
  if (this->output_slot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_slot());
  }

  // bool tolerate_debug_op_creation_failures = 5;
  if (this->tolerate_debug_op_creation_failures() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugTensorWatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugTensorWatch)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugTensorWatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugTensorWatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugTensorWatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugTensorWatch)
    MergeFrom(*source);
  }
}

void DebugTensorWatch::MergeFrom(const DebugTensorWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugTensorWatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debug_ops_.MergeFrom(from.debug_ops_);
  debug_urls_.MergeFrom(from.debug_urls_);
  if (from.node_name().size() > 0) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from.output_slot() != 0) {
    _internal_set_output_slot(from._internal_output_slot());
  }
  if (from.tolerate_debug_op_creation_failures() != 0) {
    _internal_set_tolerate_debug_op_creation_failures(from._internal_tolerate_debug_op_creation_failures());
  }
}

void DebugTensorWatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugTensorWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugTensorWatch::CopyFrom(const DebugTensorWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugTensorWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTensorWatch::IsInitialized() const {
  return true;
}

void DebugTensorWatch::InternalSwap(DebugTensorWatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  debug_ops_.InternalSwap(&other->debug_ops_);
  debug_urls_.InternalSwap(&other->debug_urls_);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugTensorWatch, tolerate_debug_op_creation_failures_)
      + sizeof(DebugTensorWatch::tolerate_debug_op_creation_failures_)
      - PROTOBUF_FIELD_OFFSET(DebugTensorWatch, output_slot_)>(
          reinterpret_cast<char*>(&output_slot_),
          reinterpret_cast<char*>(&other->output_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugTensorWatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugOptions::InitAsDefaultInstance() {
}
class DebugOptions::_Internal {
 public:
};

DebugOptions::DebugOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  debug_tensor_watch_opts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugOptions)
}
DebugOptions::DebugOptions(const DebugOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      debug_tensor_watch_opts_(from.debug_tensor_watch_opts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reset_disk_byte_usage_, &from.reset_disk_byte_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_step_) -
    reinterpret_cast<char*>(&reset_disk_byte_usage_)) + sizeof(global_step_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugOptions)
}

void DebugOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  ::memset(&reset_disk_byte_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_step_) -
      reinterpret_cast<char*>(&reset_disk_byte_usage_)) + sizeof(global_step_));
}

DebugOptions::~DebugOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DebugOptions::ArenaDtor(void* object) {
  DebugOptions* _this = reinterpret_cast< DebugOptions* >(object);
  (void)_this;
}
void DebugOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugOptions& DebugOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugOptions_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  return *internal_default_instance();
}


void DebugOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debug_tensor_watch_opts_.Clear();
  ::memset(&reset_disk_byte_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_step_) -
      reinterpret_cast<char*>(&reset_disk_byte_usage_)) + sizeof(global_step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_tensor_watch_opts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 global_step = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          global_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reset_disk_byte_usage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          reset_disk_byte_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_debug_tensor_watch_opts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_debug_tensor_watch_opts(i), target, stream);
  }

  // int64 global_step = 10;
  if (this->global_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_global_step(), target);
  }

  // bool reset_disk_byte_usage = 11;
  if (this->reset_disk_byte_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_reset_disk_byte_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugOptions)
  return target;
}

size_t DebugOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  total_size += 1UL * this->_internal_debug_tensor_watch_opts_size();
  for (const auto& msg : this->debug_tensor_watch_opts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool reset_disk_byte_usage = 11;
  if (this->reset_disk_byte_usage() != 0) {
    total_size += 1 + 1;
  }

  // int64 global_step = 10;
  if (this->global_step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_global_step());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebugOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebugOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebugOptions)
    MergeFrom(*source);
  }
}

void DebugOptions::MergeFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debug_tensor_watch_opts_.MergeFrom(from.debug_tensor_watch_opts_);
  if (from.reset_disk_byte_usage() != 0) {
    _internal_set_reset_disk_byte_usage(from._internal_reset_disk_byte_usage());
  }
  if (from.global_step() != 0) {
    _internal_set_global_step(from._internal_global_step());
  }
}

void DebugOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebugOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugOptions::CopyFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugOptions::IsInitialized() const {
  return true;
}

void DebugOptions::InternalSwap(DebugOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  debug_tensor_watch_opts_.InternalSwap(&other->debug_tensor_watch_opts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugOptions, global_step_)
      + sizeof(DebugOptions::global_step_)
      - PROTOBUF_FIELD_OFFSET(DebugOptions, reset_disk_byte_usage_)>(
          reinterpret_cast<char*>(&reset_disk_byte_usage_),
          reinterpret_cast<char*>(&other->reset_disk_byte_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebuggedSourceFile::InitAsDefaultInstance() {
}
class DebuggedSourceFile::_Internal {
 public:
};

DebuggedSourceFile::DebuggedSourceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedSourceFile)
}
DebuggedSourceFile::DebuggedSourceFile(const DebuggedSourceFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_path().empty()) {
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_path(),
      GetArena());
  }
  ::memcpy(&last_modified_, &from.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&last_modified_)) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedSourceFile)
}

void DebuggedSourceFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_modified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&last_modified_)) + sizeof(bytes_));
}

DebuggedSourceFile::~DebuggedSourceFile() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedSourceFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebuggedSourceFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebuggedSourceFile::ArenaDtor(void* object) {
  DebuggedSourceFile* _this = reinterpret_cast< DebuggedSourceFile* >(object);
  (void)_this;
}
void DebuggedSourceFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebuggedSourceFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebuggedSourceFile& DebuggedSourceFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebuggedSourceFile_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  return *internal_default_instance();
}


void DebuggedSourceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedSourceFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_modified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_) -
      reinterpret_cast<char*>(&last_modified_)) + sizeof(bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedSourceFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedSourceFile.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedSourceFile.file_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_modified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string lines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lines();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.DebuggedSourceFile.lines"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebuggedSourceFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedSourceFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedSourceFile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedSourceFile.file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_path(), target);
  }

  // int64 last_modified = 3;
  if (this->last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_modified(), target);
  }

  // int64 bytes = 4;
  if (this->bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_bytes(), target);
  }

  // repeated string lines = 5;
  for (int i = 0, n = this->_internal_lines_size(); i < n; i++) {
    const auto& s = this->_internal_lines(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedSourceFile.lines");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedSourceFile)
  return target;
}

size_t DebuggedSourceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedSourceFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lines = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lines_.size());
  for (int i = 0, n = lines_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lines_.Get(i));
  }

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string file_path = 2;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int64 last_modified = 3;
  if (this->last_modified() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_modified());
  }

  // int64 bytes = 4;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebuggedSourceFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebuggedSourceFile)
  GOOGLE_DCHECK_NE(&from, this);
  const DebuggedSourceFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebuggedSourceFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebuggedSourceFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebuggedSourceFile)
    MergeFrom(*source);
  }
}

void DebuggedSourceFile::MergeFrom(const DebuggedSourceFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedSourceFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.file_path().size() > 0) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from.last_modified() != 0) {
    _internal_set_last_modified(from._internal_last_modified());
  }
  if (from.bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
}

void DebuggedSourceFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebuggedSourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuggedSourceFile::CopyFrom(const DebuggedSourceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedSourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedSourceFile::IsInitialized() const {
  return true;
}

void DebuggedSourceFile::InternalSwap(DebuggedSourceFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lines_.InternalSwap(&other->lines_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebuggedSourceFile, bytes_)
      + sizeof(DebuggedSourceFile::bytes_)
      - PROTOBUF_FIELD_OFFSET(DebuggedSourceFile, last_modified_)>(
          reinterpret_cast<char*>(&last_modified_),
          reinterpret_cast<char*>(&other->last_modified_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedSourceFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebuggedSourceFiles::InitAsDefaultInstance() {
}
class DebuggedSourceFiles::_Internal {
 public:
};

DebuggedSourceFiles::DebuggedSourceFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  source_files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedSourceFiles)
}
DebuggedSourceFiles::DebuggedSourceFiles(const DebuggedSourceFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_files_(from.source_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedSourceFiles)
}

void DebuggedSourceFiles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebuggedSourceFiles_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
}

DebuggedSourceFiles::~DebuggedSourceFiles() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedSourceFiles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebuggedSourceFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DebuggedSourceFiles::ArenaDtor(void* object) {
  DebuggedSourceFiles* _this = reinterpret_cast< DebuggedSourceFiles* >(object);
  (void)_this;
}
void DebuggedSourceFiles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebuggedSourceFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebuggedSourceFiles& DebuggedSourceFiles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebuggedSourceFiles_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto.base);
  return *internal_default_instance();
}


void DebuggedSourceFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedSourceFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedSourceFiles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.DebuggedSourceFile source_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebuggedSourceFiles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedSourceFiles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DebuggedSourceFile source_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_source_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedSourceFiles)
  return target;
}

size_t DebuggedSourceFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedSourceFiles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DebuggedSourceFile source_files = 1;
  total_size += 1UL * this->_internal_source_files_size();
  for (const auto& msg : this->source_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebuggedSourceFiles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DebuggedSourceFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const DebuggedSourceFiles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebuggedSourceFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DebuggedSourceFiles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DebuggedSourceFiles)
    MergeFrom(*source);
  }
}

void DebuggedSourceFiles::MergeFrom(const DebuggedSourceFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedSourceFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_files_.MergeFrom(from.source_files_);
}

void DebuggedSourceFiles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DebuggedSourceFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebuggedSourceFiles::CopyFrom(const DebuggedSourceFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedSourceFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedSourceFiles::IsInitialized() const {
  return true;
}

void DebuggedSourceFiles::InternalSwap(DebuggedSourceFiles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_files_.InternalSwap(&other->source_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedSourceFiles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::DebugTensorWatch* Arena::CreateMaybeMessage< ::tensorflow::DebugTensorWatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugTensorWatch >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebugOptions* Arena::CreateMaybeMessage< ::tensorflow::DebugOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedSourceFile* Arena::CreateMaybeMessage< ::tensorflow::DebuggedSourceFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedSourceFile >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedSourceFiles* Arena::CreateMaybeMessage< ::tensorflow::DebuggedSourceFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedSourceFiles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
