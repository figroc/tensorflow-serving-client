// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/config/model_server_config.proto

#include "tensorflow_serving/config/model_server_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoggingConfig_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelConfig_VersionLabelsEntry_DoNotUse_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto;
namespace tensorflow {
namespace serving {
class ModelConfig_VersionLabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfig_VersionLabelsEntry_DoNotUse> _instance;
} _ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_;
class ModelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfig> _instance;
} _ModelConfig_default_instance_;
class ModelConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfigList> _instance;
} _ModelConfigList_default_instance_;
class ModelServerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelServerConfig> _instance;
  const ::tensorflow::serving::ModelConfigList* model_config_list_;
  const PROTOBUF_NAMESPACE_ID::Any* custom_model_config_;
} _ModelServerConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static void InitDefaultsscc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ModelConfig_default_instance_;
    new (ptr) ::tensorflow::serving::ModelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ModelConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto}, {
      &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
      &scc_info_ModelConfig_VersionLabelsEntry_DoNotUse_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,
      &scc_info_LoggingConfig_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelConfig_VersionLabelsEntry_DoNotUse_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse();
  }
  ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelConfig_VersionLabelsEntry_DoNotUse_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelConfig_VersionLabelsEntry_DoNotUse_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ModelConfigList_default_instance_;
    new (ptr) ::tensorflow::serving::ModelConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ModelConfigList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto}, {
      &scc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelServerConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ModelServerConfig_default_instance_;
    new (ptr) ::tensorflow::serving::ModelServerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ModelServerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelServerConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelServerConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto}, {
      &scc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, base_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, model_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, model_platform_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, model_version_policy_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, version_labels_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfig, logging_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelConfigList, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelServerConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::serving::ModelServerConfigDefaultTypeInternal, model_config_list_),
  offsetof(::tensorflow::serving::ModelServerConfigDefaultTypeInternal, custom_model_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::ModelServerConfig, config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::tensorflow::serving::ModelConfig)},
  { 21, -1, sizeof(::tensorflow::serving::ModelConfigList)},
  { 27, -1, sizeof(::tensorflow::serving::ModelServerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ModelConfig_VersionLabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ModelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ModelConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_ModelServerConfig_default_instance_),
};

const char descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3tensorflow_serving/config/model_server"
  "_config.proto\022\022tensorflow.serving\032\031googl"
  "e/protobuf/any.proto\032.tensorflow_serving"
  "/config/logging_config.proto\032Mtensorflow"
  "_serving/sources/storage_path/file_syste"
  "m_storage_path_source.proto\"\253\003\n\013ModelCon"
  "fig\022\014\n\004name\030\001 \001(\t\022\021\n\tbase_path\030\002 \001(\t\0225\n\n"
  "model_type\030\003 \001(\0162\035.tensorflow.serving.Mo"
  "delTypeB\002\030\001\022\026\n\016model_platform\030\004 \001(\t\022i\n\024m"
  "odel_version_policy\030\007 \001(\0132K.tensorflow.s"
  "erving.FileSystemStoragePathSourceConfig"
  ".ServableVersionPolicy\022J\n\016version_labels"
  "\030\010 \003(\01322.tensorflow.serving.ModelConfig."
  "VersionLabelsEntry\0229\n\016logging_config\030\006 \001"
  "(\0132!.tensorflow.serving.LoggingConfig\0324\n"
  "\022VersionLabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\003:\0028\001J\004\010\005\020\006\"B\n\017ModelConfigList\022/\n\006"
  "config\030\001 \003(\0132\037.tensorflow.serving.ModelC"
  "onfig\"\224\001\n\021ModelServerConfig\022@\n\021model_con"
  "fig_list\030\001 \001(\0132#.tensorflow.serving.Mode"
  "lConfigListH\000\0223\n\023custom_model_config\030\002 \001"
  "(\0132\024.google.protobuf.AnyH\000B\010\n\006config*N\n\t"
  "ModelType\022\036\n\026MODEL_TYPE_UNSPECIFIED\020\000\032\002\010"
  "\001\022\022\n\nTENSORFLOW\020\001\032\002\010\001\022\r\n\005OTHER\020\002\032\002\010\001B\003\370\001"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fconfig_2flogging_5fconfig_2eproto,
  &::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_sccs[4] = {
  &scc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,
  &scc_info_ModelConfig_VersionLabelsEntry_DoNotUse_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,
  &scc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,
  &scc_info_ModelServerConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto, "tensorflow_serving/config/model_server_config.proto", 969,
  &descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_once, descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_sccs, descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto::offsets,
  file_level_metadata_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto, 4, file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto, file_level_service_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto)), true);
namespace tensorflow {
namespace serving {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto);
  return file_level_enum_descriptors_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto[0];
}
bool ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ModelConfig_VersionLabelsEntry_DoNotUse::ModelConfig_VersionLabelsEntry_DoNotUse() {}
ModelConfig_VersionLabelsEntry_DoNotUse::ModelConfig_VersionLabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelConfig_VersionLabelsEntry_DoNotUse::MergeFrom(const ModelConfig_VersionLabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig_VersionLabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ModelConfig_VersionLabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ModelConfig::InitAsDefaultInstance() {
  ::tensorflow::serving::_ModelConfig_default_instance_._instance.get_mutable()->model_version_policy_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::internal_default_instance());
  ::tensorflow::serving::_ModelConfig_default_instance_._instance.get_mutable()->logging_config_ = const_cast< ::tensorflow::serving::LoggingConfig*>(
      ::tensorflow::serving::LoggingConfig::internal_default_instance());
}
class ModelConfig::_Internal {
 public:
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& model_version_policy(const ModelConfig* msg);
  static const ::tensorflow::serving::LoggingConfig& logging_config(const ModelConfig* msg);
};

const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&
ModelConfig::_Internal::model_version_policy(const ModelConfig* msg) {
  return *msg->model_version_policy_;
}
const ::tensorflow::serving::LoggingConfig&
ModelConfig::_Internal::logging_config(const ModelConfig* msg) {
  return *msg->logging_config_;
}
void ModelConfig::clear_model_version_policy() {
  if (GetArena() == nullptr && model_version_policy_ != nullptr) {
    delete model_version_policy_;
  }
  model_version_policy_ = nullptr;
}
void ModelConfig::clear_logging_config() {
  if (GetArena() == nullptr && logging_config_ != nullptr) {
    delete logging_config_;
  }
  logging_config_ = nullptr;
}
ModelConfig::ModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  version_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelConfig)
}
ModelConfig::ModelConfig(const ModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_labels_.MergeFrom(from.version_labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_path().empty()) {
    base_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_path(),
      GetArena());
  }
  model_platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_platform().empty()) {
    model_platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_platform(),
      GetArena());
  }
  if (from._internal_has_logging_config()) {
    logging_config_ = new ::tensorflow::serving::LoggingConfig(*from.logging_config_);
  } else {
    logging_config_ = nullptr;
  }
  if (from._internal_has_model_version_policy()) {
    model_version_policy_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy(*from.model_version_policy_);
  } else {
    model_version_policy_ = nullptr;
  }
  model_type_ = from.model_type_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelConfig)
}

void ModelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&logging_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_type_) -
      reinterpret_cast<char*>(&logging_config_)) + sizeof(model_type_));
}

ModelConfig::~ModelConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete logging_config_;
  if (this != internal_default_instance()) delete model_version_policy_;
}

void ModelConfig::ArenaDtor(void* object) {
  ModelConfig* _this = reinterpret_cast< ModelConfig* >(object);
  (void)_this;
}
void ModelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelConfig& ModelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_labels_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && logging_config_ != nullptr) {
    delete logging_config_;
  }
  logging_config_ = nullptr;
  if (GetArena() == nullptr && model_version_policy_ != nullptr) {
    delete model_version_policy_;
  }
  model_version_policy_ = nullptr;
  model_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.ModelConfig.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.ModelConfig.base_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model_type(static_cast<::tensorflow::serving::ModelType>(val));
        } else goto handle_unusual;
        continue;
      // string model_platform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_model_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.ModelConfig.model_platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.LoggingConfig logging_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_logging_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_version_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> version_labels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&version_labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelConfig.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
  if (this->model_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_model_type(), target);
  }

  // string model_platform = 4;
  if (this->model_platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_platform().data(), static_cast<int>(this->_internal_model_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelConfig.model_platform");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model_platform(), target);
  }

  // .tensorflow.serving.LoggingConfig logging_config = 6;
  if (this->has_logging_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::logging_config(this), target, stream);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
  if (this->has_model_version_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::model_version_policy(this), target, stream);
  }

  // map<string, int64> version_labels = 8;
  if (!this->_internal_version_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "tensorflow.serving.ModelConfig.VersionLabelsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_version_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_version_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_version_labels().begin();
          it != this->_internal_version_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelConfig_VersionLabelsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_version_labels().begin();
          it != this->_internal_version_labels().end(); ++it) {
        target = ModelConfig_VersionLabelsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelConfig)
  return target;
}

size_t ModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> version_labels = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_version_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_version_labels().begin();
      it != this->_internal_version_labels().end(); ++it) {
    total_size += ModelConfig_VersionLabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // string model_platform = 4;
  if (this->model_platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_platform());
  }

  // .tensorflow.serving.LoggingConfig logging_config = 6;
  if (this->has_logging_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_config_);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy model_version_policy = 7;
  if (this->has_model_version_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_version_policy_);
  }

  // .tensorflow.serving.ModelType model_type = 3 [deprecated = true];
  if (this->model_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ModelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ModelConfig)
    MergeFrom(*source);
  }
}

void ModelConfig::MergeFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_labels_.MergeFrom(from.version_labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.base_path().size() > 0) {
    _internal_set_base_path(from._internal_base_path());
  }
  if (from.model_platform().size() > 0) {
    _internal_set_model_platform(from._internal_model_platform());
  }
  if (from.has_logging_config()) {
    _internal_mutable_logging_config()->::tensorflow::serving::LoggingConfig::MergeFrom(from._internal_logging_config());
  }
  if (from.has_model_version_policy()) {
    _internal_mutable_model_version_policy()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(from._internal_model_version_policy());
  }
  if (from.model_type() != 0) {
    _internal_set_model_type(from._internal_model_type());
  }
}

void ModelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {
  return true;
}

void ModelConfig::InternalSwap(ModelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_labels_.Swap(&other->version_labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_path_.Swap(&other->base_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_platform_.Swap(&other->model_platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelConfig, model_type_)
      + sizeof(ModelConfig::model_type_)
      - PROTOBUF_FIELD_OFFSET(ModelConfig, logging_config_)>(
          reinterpret_cast<char*>(&logging_config_),
          reinterpret_cast<char*>(&other->logging_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelConfigList::InitAsDefaultInstance() {
}
class ModelConfigList::_Internal {
 public:
};

ModelConfigList::ModelConfigList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelConfigList)
}
ModelConfigList::ModelConfigList(const ModelConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      config_(from.config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelConfigList)
}

void ModelConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base);
}

ModelConfigList::~ModelConfigList() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelConfigList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelConfigList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ModelConfigList::ArenaDtor(void* object) {
  ModelConfigList* _this = reinterpret_cast< ModelConfigList* >(object);
  (void)_this;
}
void ModelConfigList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelConfigList& ModelConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelConfigList_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorflow.serving.ModelConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.serving.ModelConfig config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelConfigList)
  return target;
}

size_t ModelConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.ModelConfig config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelConfigList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ModelConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelConfigList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ModelConfigList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ModelConfigList)
    MergeFrom(*source);
  }
}

void ModelConfigList::MergeFrom(const ModelConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void ModelConfigList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ModelConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigList::CopyFrom(const ModelConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigList::IsInitialized() const {
  return true;
}

void ModelConfigList::InternalSwap(ModelConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  config_.InternalSwap(&other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelServerConfig::InitAsDefaultInstance() {
  ::tensorflow::serving::_ModelServerConfig_default_instance_.model_config_list_ = const_cast< ::tensorflow::serving::ModelConfigList*>(
      ::tensorflow::serving::ModelConfigList::internal_default_instance());
  ::tensorflow::serving::_ModelServerConfig_default_instance_.custom_model_config_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class ModelServerConfig::_Internal {
 public:
  static const ::tensorflow::serving::ModelConfigList& model_config_list(const ModelServerConfig* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& custom_model_config(const ModelServerConfig* msg);
};

const ::tensorflow::serving::ModelConfigList&
ModelServerConfig::_Internal::model_config_list(const ModelServerConfig* msg) {
  return *msg->config_.model_config_list_;
}
const PROTOBUF_NAMESPACE_ID::Any&
ModelServerConfig::_Internal::custom_model_config(const ModelServerConfig* msg) {
  return *msg->config_.custom_model_config_;
}
void ModelServerConfig::set_allocated_model_config_list(::tensorflow::serving::ModelConfigList* model_config_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_config();
  if (model_config_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_config_list);
    if (message_arena != submessage_arena) {
      model_config_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_config_list, submessage_arena);
    }
    set_has_model_config_list();
    config_.model_config_list_ = model_config_list;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelServerConfig.model_config_list)
}
void ModelServerConfig::set_allocated_custom_model_config(PROTOBUF_NAMESPACE_ID::Any* custom_model_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_config();
  if (custom_model_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_model_config)->GetArena();
    if (message_arena != submessage_arena) {
      custom_model_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_model_config, submessage_arena);
    }
    set_has_custom_model_config();
    config_.custom_model_config_ = custom_model_config;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelServerConfig.custom_model_config)
}
void ModelServerConfig::clear_custom_model_config() {
  if (_internal_has_custom_model_config()) {
    if (GetArena() == nullptr) {
      delete config_.custom_model_config_;
    }
    clear_has_config();
  }
}
ModelServerConfig::ModelServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelServerConfig)
}
ModelServerConfig::ModelServerConfig(const ModelServerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kModelConfigList: {
      _internal_mutable_model_config_list()->::tensorflow::serving::ModelConfigList::MergeFrom(from._internal_model_config_list());
      break;
    }
    case kCustomModelConfig: {
      _internal_mutable_custom_model_config()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_custom_model_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelServerConfig)
}

void ModelServerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelServerConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base);
  clear_has_config();
}

ModelServerConfig::~ModelServerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelServerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelServerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_config()) {
    clear_config();
  }
}

void ModelServerConfig::ArenaDtor(void* object) {
  ModelServerConfig* _this = reinterpret_cast< ModelServerConfig* >(object);
  (void)_this;
}
void ModelServerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelServerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelServerConfig& ModelServerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelServerConfig_tensorflow_5fserving_2fconfig_2fmodel_5fserver_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelServerConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.ModelServerConfig)
  switch (config_case()) {
    case kModelConfigList: {
      if (GetArena() == nullptr) {
        delete config_.model_config_list_;
      }
      break;
    }
    case kCustomModelConfig: {
      if (GetArena() == nullptr) {
        delete config_.custom_model_config_;
      }
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void ModelServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelServerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_config();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelServerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.ModelConfigList model_config_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_config_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any custom_model_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_model_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelServerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelServerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.ModelConfigList model_config_list = 1;
  if (_internal_has_model_config_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model_config_list(this), target, stream);
  }

  // .google.protobuf.Any custom_model_config = 2;
  if (_internal_has_custom_model_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::custom_model_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelServerConfig)
  return target;
}

size_t ModelServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelServerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (config_case()) {
    // .tensorflow.serving.ModelConfigList model_config_list = 1;
    case kModelConfigList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.model_config_list_);
      break;
    }
    // .google.protobuf.Any custom_model_config = 2;
    case kCustomModelConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_.custom_model_config_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelServerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ModelServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelServerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelServerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ModelServerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ModelServerConfig)
    MergeFrom(*source);
  }
}

void ModelServerConfig::MergeFrom(const ModelServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.config_case()) {
    case kModelConfigList: {
      _internal_mutable_model_config_list()->::tensorflow::serving::ModelConfigList::MergeFrom(from._internal_model_config_list());
      break;
    }
    case kCustomModelConfig: {
      _internal_mutable_custom_model_config()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_custom_model_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void ModelServerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ModelServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelServerConfig::CopyFrom(const ModelServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelServerConfig::IsInitialized() const {
  return true;
}

void ModelServerConfig::InternalSwap(ModelServerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelServerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelConfig_VersionLabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelConfig* Arena::CreateMaybeMessage< ::tensorflow::serving::ModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelConfigList* Arena::CreateMaybeMessage< ::tensorflow::serving::ModelConfigList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::ModelServerConfig* Arena::CreateMaybeMessage< ::tensorflow::serving::ModelServerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelServerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
