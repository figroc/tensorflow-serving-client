// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

#include "tensorflow_serving/sources/storage_path/file_system_storage_path_source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
namespace tensorflow {
namespace serving {
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest> _instance;
} _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig_ServableVersionPolicy_All> _instance;
} _FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific> _instance;
} _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig_ServableVersionPolicy> _instance;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest_;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all_;
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific_;
} _FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_;
class FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig_ServableToMonitor> _instance;
} _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
class FileSystemStoragePathSourceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileSystemStoragePathSourceConfig> _instance;
} _FileSystemStoragePathSourceConfig_default_instance_;
}  // namespace serving
}  // namespace tensorflow
static void InitDefaultsscc_info_FileSystemStoragePathSourceConfig_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_FileSystemStoragePathSourceConfig_default_instance_;
    new (ptr) ::tensorflow::serving::FileSystemStoragePathSourceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::FileSystemStoragePathSourceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileSystemStoragePathSourceConfig_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileSystemStoragePathSourceConfig_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto}, {
      &scc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,}};

static void InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
    new (ptr) ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto}, {
      &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,}};

static void InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_;
    new (ptr) ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto}, {
      &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
      &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
      &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,}};

static void InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_;
    new (ptr) ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto}, {}};

static void InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_;
    new (ptr) ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto}, {}};

static void InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_;
    new (ptr) ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest, num_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific, versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal, latest_),
  offsetof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal, all_),
  offsetof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal, specific_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy, policy_choice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, servable_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, base_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor, servable_version_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, servables_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, servable_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, base_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, file_system_poll_wait_seconds_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, fail_if_zero_versions_at_startup_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::serving::FileSystemStoragePathSourceConfig, servable_versions_always_present_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest)},
  { 6, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All)},
  { 11, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific)},
  { 17, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy)},
  { 26, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor)},
  { 34, -1, sizeof(::tensorflow::serving::FileSystemStoragePathSourceConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::serving::_FileSystemStoragePathSourceConfig_default_instance_),
};

const char descriptor_table_protodef_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nMtensorflow_serving/sources/storage_pat"
  "h/file_system_storage_path_source.proto\022"
  "\022tensorflow.serving\"\204\007\n!FileSystemStorag"
  "ePathSourceConfig\022Z\n\tservables\030\005 \003(\0132G.t"
  "ensorflow.serving.FileSystemStoragePathS"
  "ourceConfig.ServableToMonitor\022\031\n\rservabl"
  "e_name\030\001 \001(\tB\002\030\001\022\025\n\tbase_path\030\002 \001(\tB\002\030\001\022"
  "%\n\035file_system_poll_wait_seconds\030\003 \001(\003\022,"
  "\n fail_if_zero_versions_at_startup\030\004 \001(\010"
  "B\002\030\001\022(\n servable_versions_always_present"
  "\030\006 \001(\010\032\235\003\n\025ServableVersionPolicy\022d\n\006late"
  "st\030d \001(\0132R.tensorflow.serving.FileSystem"
  "StoragePathSourceConfig.ServableVersionP"
  "olicy.LatestH\000\022^\n\003all\030e \001(\0132O.tensorflow"
  ".serving.FileSystemStoragePathSourceConf"
  "ig.ServableVersionPolicy.AllH\000\022h\n\010specif"
  "ic\030f \001(\0132T.tensorflow.serving.FileSystem"
  "StoragePathSourceConfig.ServableVersionP"
  "olicy.SpecificH\000\032\036\n\006Latest\022\024\n\014num_versio"
  "ns\030\001 \001(\r\032\005\n\003All\032\034\n\010Specific\022\020\n\010versions\030"
  "\001 \003(\003B\017\n\rpolicy_choice\032\261\001\n\021ServableToMon"
  "itor\022\025\n\rservable_name\030\001 \001(\t\022\021\n\tbase_path"
  "\030\002 \001(\t\022l\n\027servable_version_policy\030\004 \001(\0132"
  "K.tensorflow.serving.FileSystemStoragePa"
  "thSourceConfig.ServableVersionPolicyJ\004\010\003"
  "\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_sccs[6] = {
  &scc_info_FileSystemStoragePathSourceConfig_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
  &scc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
  &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
  &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
  &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
  &scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = {
  false, false, descriptor_table_protodef_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto, "tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto", 1010,
  &descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_once, descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_sccs, descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto::offsets,
  file_level_metadata_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto, 6, file_level_enum_descriptors_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto, file_level_service_descriptors_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto)), true);
namespace tensorflow {
namespace serving {

// ===================================================================

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InitAsDefaultInstance() {
}
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_Internal {
 public:
};

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_versions_ = from.num_versions_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SharedCtor() {
  num_versions_ = 0u;
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::ArenaDtor(void* object) {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* _this = reinterpret_cast< FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* >(object);
  (void)_this;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  return *internal_default_instance();
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_versions_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_versions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_versions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_versions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_versions() != 0) {
    _internal_set_num_versions(from._internal_num_versions());
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(num_versions_, other->num_versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::InitAsDefaultInstance() {
}
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::_Internal {
 public:
};

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SharedCtor() {
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_All() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::ArenaDtor(void* object) {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* _this = reinterpret_cast< FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* >(object);
  (void)_this;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  return *internal_default_instance();
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InitAsDefaultInstance() {
}
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_Internal {
 public:
};

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  versions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SharedCtor() {
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::ArenaDtor(void* object) {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* _this = reinterpret_cast< FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* >(object);
  (void)_this;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  return *internal_default_instance();
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_versions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_versions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    int byte_size = _versions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_versions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _versions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::InitAsDefaultInstance() {
  ::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_.latest_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest*>(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::internal_default_instance());
  ::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_.all_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All*>(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::internal_default_instance());
  ::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_.specific_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific*>(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::internal_default_instance());
}
class FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal {
 public:
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg);
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& all(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg);
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg);
};

const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&
FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal::latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg) {
  return *msg->policy_choice_.latest_;
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&
FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal::all(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg) {
  return *msg->policy_choice_.all_;
}
const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&
FileSystemStoragePathSourceConfig_ServableVersionPolicy::_Internal::specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy* msg) {
  return *msg->policy_choice_.specific_;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_policy_choice();
  if (latest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latest);
    if (message_arena != submessage_arena) {
      latest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest, submessage_arena);
    }
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_policy_choice();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_policy_choice();
  if (specific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specific);
    if (message_arena != submessage_arena) {
      specific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific, submessage_arena);
    }
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}
FileSystemStoragePathSourceConfig_ServableVersionPolicy::FileSystemStoragePathSourceConfig_ServableVersionPolicy(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_policy_choice();
  switch (from.policy_choice_case()) {
    case kLatest: {
      _internal_mutable_latest()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(from._internal_latest());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(from._internal_all());
      break;
    }
    case kSpecific: {
      _internal_mutable_specific()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(from._internal_specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  clear_has_policy_choice();
}

FileSystemStoragePathSourceConfig_ServableVersionPolicy::~FileSystemStoragePathSourceConfig_ServableVersionPolicy() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_policy_choice()) {
    clear_policy_choice();
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::ArenaDtor(void* object) {
  FileSystemStoragePathSourceConfig_ServableVersionPolicy* _this = reinterpret_cast< FileSystemStoragePathSourceConfig_ServableVersionPolicy* >(object);
  (void)_this;
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileSystemStoragePathSourceConfig_ServableVersionPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableVersionPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSystemStoragePathSourceConfig_ServableVersionPolicy_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  return *internal_default_instance();
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_policy_choice() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  switch (policy_choice_case()) {
    case kLatest: {
      if (GetArena() == nullptr) {
        delete policy_choice_.latest_;
      }
      break;
    }
    case kAll: {
      if (GetArena() == nullptr) {
        delete policy_choice_.all_;
      }
      break;
    }
    case kSpecific: {
      if (GetArena() == nullptr) {
        delete policy_choice_.specific_;
      }
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}


void FileSystemStoragePathSourceConfig_ServableVersionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_policy_choice();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_specific(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  if (_internal_has_latest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::latest(this), target, stream);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  if (_internal_has_all()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::all(this), target, stream);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  if (_internal_has_specific()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::specific(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableVersionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (policy_choice_case()) {
    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
    case kLatest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.latest_);
      break;
    }
    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
    case kAll: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.all_);
      break;
    }
    // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
    case kSpecific: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.specific_);
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig_ServableVersionPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSystemStoragePathSourceConfig_ServableVersionPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.policy_choice_case()) {
    case kLatest: {
      _internal_mutable_latest()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::MergeFrom(from._internal_latest());
      break;
    }
    case kAll: {
      _internal_mutable_all()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All::MergeFrom(from._internal_all());
      break;
    }
    case kSpecific: {
      _internal_mutable_specific()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::MergeFrom(from._internal_specific());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableVersionPolicy::InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(policy_choice_, other->policy_choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableVersionPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileSystemStoragePathSourceConfig_ServableToMonitor::InitAsDefaultInstance() {
  ::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_._instance.get_mutable()->servable_version_policy_ = const_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::internal_default_instance());
}
class FileSystemStoragePathSourceConfig_ServableToMonitor::_Internal {
 public:
  static const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& servable_version_policy(const FileSystemStoragePathSourceConfig_ServableToMonitor* msg);
};

const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&
FileSystemStoragePathSourceConfig_ServableToMonitor::_Internal::servable_version_policy(const FileSystemStoragePathSourceConfig_ServableToMonitor* msg) {
  return *msg->servable_version_policy_;
}
FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}
FileSystemStoragePathSourceConfig_ServableToMonitor::FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servable_name().empty()) {
    servable_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servable_name(),
      GetArena());
  }
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_path().empty()) {
    base_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_path(),
      GetArena());
  }
  if (from._internal_has_servable_version_policy()) {
    servable_version_policy_ = new ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy(*from.servable_version_policy_);
  } else {
    servable_version_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  servable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servable_version_policy_ = nullptr;
}

FileSystemStoragePathSourceConfig_ServableToMonitor::~FileSystemStoragePathSourceConfig_ServableToMonitor() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete servable_version_policy_;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::ArenaDtor(void* object) {
  FileSystemStoragePathSourceConfig_ServableToMonitor* _this = reinterpret_cast< FileSystemStoragePathSourceConfig_ServableToMonitor* >(object);
  (void)_this;
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileSystemStoragePathSourceConfig_ServableToMonitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig_ServableToMonitor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSystemStoragePathSourceConfig_ServableToMonitor_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  return *internal_default_instance();
}


void FileSystemStoragePathSourceConfig_ServableToMonitor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servable_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && servable_version_policy_ != nullptr) {
    delete servable_version_policy_;
  }
  servable_version_policy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig_ServableToMonitor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string servable_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_servable_version_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSystemStoragePathSourceConfig_ServableToMonitor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string servable_name = 1;
  if (this->servable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servable_name().data(), static_cast<int>(this->_internal_servable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servable_name(), target);
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->has_servable_version_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::servable_version_policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  return target;
}

size_t FileSystemStoragePathSourceConfig_ServableToMonitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servable_name = 1;
  if (this->servable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servable_name());
  }

  // string base_path = 2;
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  if (this->has_servable_version_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *servable_version_policy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig_ServableToMonitor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSystemStoragePathSourceConfig_ServableToMonitor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servable_name().size() > 0) {
    _internal_set_servable_name(from._internal_servable_name());
  }
  if (from.base_path().size() > 0) {
    _internal_set_base_path(from._internal_base_path());
  }
  if (from.has_servable_version_policy()) {
    _internal_mutable_servable_version_policy()->::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy::MergeFrom(from._internal_servable_version_policy());
  }
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig_ServableToMonitor::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig_ServableToMonitor::InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servable_name_.Swap(&other->servable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_path_.Swap(&other->base_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(servable_version_policy_, other->servable_version_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig_ServableToMonitor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileSystemStoragePathSourceConfig::InitAsDefaultInstance() {
}
class FileSystemStoragePathSourceConfig::_Internal {
 public:
};

FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}
FileSystemStoragePathSourceConfig::FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servables_(from.servables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  servable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servable_name().empty()) {
    servable_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_servable_name(),
      GetArena());
  }
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_path().empty()) {
    base_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_path(),
      GetArena());
  }
  ::memcpy(&file_system_poll_wait_seconds_, &from.file_system_poll_wait_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&servable_versions_always_present_) -
    reinterpret_cast<char*>(&file_system_poll_wait_seconds_)) + sizeof(servable_versions_always_present_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
}

void FileSystemStoragePathSourceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileSystemStoragePathSourceConfig_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  servable_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_system_poll_wait_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servable_versions_always_present_) -
      reinterpret_cast<char*>(&file_system_poll_wait_seconds_)) + sizeof(servable_versions_always_present_));
}

FileSystemStoragePathSourceConfig::~FileSystemStoragePathSourceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.FileSystemStoragePathSourceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileSystemStoragePathSourceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  servable_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileSystemStoragePathSourceConfig::ArenaDtor(void* object) {
  FileSystemStoragePathSourceConfig* _this = reinterpret_cast< FileSystemStoragePathSourceConfig* >(object);
  (void)_this;
}
void FileSystemStoragePathSourceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileSystemStoragePathSourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileSystemStoragePathSourceConfig& FileSystemStoragePathSourceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileSystemStoragePathSourceConfig_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.base);
  return *internal_default_instance();
}


void FileSystemStoragePathSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servables_.Clear();
  servable_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&file_system_poll_wait_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servable_versions_always_present_) -
      reinterpret_cast<char*>(&file_system_poll_wait_seconds_)) + sizeof(servable_versions_always_present_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileSystemStoragePathSourceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string servable_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_servable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_path = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 file_system_poll_wait_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          file_system_poll_wait_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fail_if_zero_versions_at_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool servable_versions_always_present = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          servable_versions_always_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileSystemStoragePathSourceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servable_name().data(), static_cast<int>(this->_internal_servable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servable_name(), target);
  }

  // string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_path().data(), static_cast<int>(this->_internal_base_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.FileSystemStoragePathSourceConfig.base_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base_path(), target);
  }

  // int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_file_system_poll_wait_seconds(), target);
  }

  // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->fail_if_zero_versions_at_startup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fail_if_zero_versions_at_startup(), target);
  }

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_servables(i), target, stream);
  }

  // bool servable_versions_always_present = 6;
  if (this->servable_versions_always_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_servable_versions_always_present(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.FileSystemStoragePathSourceConfig)
  return target;
}

size_t FileSystemStoragePathSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  total_size += 1UL * this->_internal_servables_size();
  for (const auto& msg : this->servables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string servable_name = 1 [deprecated = true];
  if (this->servable_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servable_name());
  }

  // string base_path = 2 [deprecated = true];
  if (this->base_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_path());
  }

  // int64 file_system_poll_wait_seconds = 3;
  if (this->file_system_poll_wait_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_file_system_poll_wait_seconds());
  }

  // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  if (this->fail_if_zero_versions_at_startup() != 0) {
    total_size += 1 + 1;
  }

  // bool servable_versions_always_present = 6;
  if (this->servable_versions_always_present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileSystemStoragePathSourceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSystemStoragePathSourceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileSystemStoragePathSourceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.FileSystemStoragePathSourceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.FileSystemStoragePathSourceConfig)
    MergeFrom(*source);
  }
}

void FileSystemStoragePathSourceConfig::MergeFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servables_.MergeFrom(from.servables_);
  if (from.servable_name().size() > 0) {
    _internal_set_servable_name(from._internal_servable_name());
  }
  if (from.base_path().size() > 0) {
    _internal_set_base_path(from._internal_base_path());
  }
  if (from.file_system_poll_wait_seconds() != 0) {
    _internal_set_file_system_poll_wait_seconds(from._internal_file_system_poll_wait_seconds());
  }
  if (from.fail_if_zero_versions_at_startup() != 0) {
    _internal_set_fail_if_zero_versions_at_startup(from._internal_fail_if_zero_versions_at_startup());
  }
  if (from.servable_versions_always_present() != 0) {
    _internal_set_servable_versions_always_present(from._internal_servable_versions_always_present());
  }
}

void FileSystemStoragePathSourceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSystemStoragePathSourceConfig::CopyFrom(const FileSystemStoragePathSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.FileSystemStoragePathSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSystemStoragePathSourceConfig::IsInitialized() const {
  return true;
}

void FileSystemStoragePathSourceConfig::InternalSwap(FileSystemStoragePathSourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servables_.InternalSwap(&other->servables_);
  servable_name_.Swap(&other->servable_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_path_.Swap(&other->base_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileSystemStoragePathSourceConfig, servable_versions_always_present_)
      + sizeof(FileSystemStoragePathSourceConfig::servable_versions_always_present_)
      - PROTOBUF_FIELD_OFFSET(FileSystemStoragePathSourceConfig, file_system_poll_wait_seconds_)>(
          reinterpret_cast<char*>(&file_system_poll_wait_seconds_),
          reinterpret_cast<char*>(&other->file_system_poll_wait_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileSystemStoragePathSourceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::serving::FileSystemStoragePathSourceConfig* Arena::CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::FileSystemStoragePathSourceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
