// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
namespace tensorflow {
namespace serving {
class FileSystemStoragePathSourceConfig;
class FileSystemStoragePathSourceConfigDefaultTypeInternal;
extern FileSystemStoragePathSourceConfigDefaultTypeInternal _FileSystemStoragePathSourceConfig_default_instance_;
class FileSystemStoragePathSourceConfig_ServableToMonitor;
class FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableToMonitorDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy;
class FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicyDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicy_AllDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicy_LatestDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific;
class FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal;
extern FileSystemStoragePathSourceConfig_ServableVersionPolicy_SpecificDefaultTypeInternal _FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::FileSystemStoragePathSourceConfig* Arena::CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig>(Arena*);
template<> ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* Arena::CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor>(Arena*);
template<> ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* Arena::CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy>(Arena*);
template<> ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* Arena::CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(Arena*);
template<> ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* Arena::CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(Arena*);
template<> ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* Arena::CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(nullptr) {}
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&& from) noexcept
    : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest() {
    *this = ::std::move(from);
  }

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& default_instance();

  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest*>(
               &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* New() const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(nullptr);
  }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest";
  }
  protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumVersionsFieldNumber = 1,
  };
  // uint32 num_versions = 1;
  void clear_num_versions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_versions() const;
  void set_num_versions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_versions() const;
  void _internal_set_num_versions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_versions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_All PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All() : FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(nullptr) {}
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_All();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&& from) noexcept
    : FileSystemStoragePathSourceConfig_ServableVersionPolicy_All() {
    *this = ::std::move(from);
  }

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& default_instance();

  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All*>(
               &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* New() const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(nullptr);
  }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy_All>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All";
  }
  protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy_All(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(nullptr) {}
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&& from) noexcept
    : FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific() {
    *this = ::std::move(from);
  }

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& default_instance();

  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific*>(
               &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* New() const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(nullptr);
  }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific";
  }
  protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 1,
  };
  // repeated int64 versions = 1;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_versions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_versions() const;
  void _internal_add_versions(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_versions();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 versions(int index) const;
  void set_versions(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_versions(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_versions();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > versions_;
  mutable std::atomic<int> _versions_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableVersionPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy() : FileSystemStoragePathSourceConfig_ServableVersionPolicy(nullptr) {}
  virtual ~FileSystemStoragePathSourceConfig_ServableVersionPolicy();

  FileSystemStoragePathSourceConfig_ServableVersionPolicy(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  FileSystemStoragePathSourceConfig_ServableVersionPolicy(FileSystemStoragePathSourceConfig_ServableVersionPolicy&& from) noexcept
    : FileSystemStoragePathSourceConfig_ServableVersionPolicy() {
    *this = ::std::move(from);
  }

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy& operator=(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy& operator=(FileSystemStoragePathSourceConfig_ServableVersionPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableVersionPolicy& default_instance();

  enum PolicyChoiceCase {
    kLatest = 100,
    kAll = 101,
    kSpecific = 102,
    POLICY_CHOICE_NOT_SET = 0,
  };

  static inline const FileSystemStoragePathSourceConfig_ServableVersionPolicy* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableVersionPolicy*>(
               &_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy& a, FileSystemStoragePathSourceConfig_ServableVersionPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableVersionPolicy* New() const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy>(nullptr);
  }

  FileSystemStoragePathSourceConfig_ServableVersionPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableVersionPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableVersionPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableVersionPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy";
  }
  protected:
  explicit FileSystemStoragePathSourceConfig_ServableVersionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest Latest;
  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy_All All;
  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific Specific;

  // accessors -------------------------------------------------------

  enum : int {
    kLatestFieldNumber = 100,
    kAllFieldNumber = 101,
    kSpecificFieldNumber = 102,
  };
  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
  bool has_latest() const;
  private:
  bool _internal_has_latest() const;
  public:
  void clear_latest();
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& latest() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* release_latest();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* mutable_latest();
  void set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest);
  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& _internal_latest() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* _internal_mutable_latest();
  public:
  void unsafe_arena_set_allocated_latest(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* unsafe_arena_release_latest();

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
  bool has_all() const;
  private:
  bool _internal_has_all() const;
  public:
  void clear_all();
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& all() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* release_all();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* mutable_all();
  void set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all);
  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& _internal_all() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* _internal_mutable_all();
  public:
  void unsafe_arena_set_allocated_all(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* unsafe_arena_release_all();

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
  bool has_specific() const;
  private:
  bool _internal_has_specific() const;
  public:
  void clear_specific();
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& specific() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* release_specific();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* mutable_specific();
  void set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific);
  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& _internal_specific() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* _internal_mutable_specific();
  public:
  void unsafe_arena_set_allocated_specific(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* unsafe_arena_release_specific();

  void clear_policy_choice();
  PolicyChoiceCase policy_choice_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy)
 private:
  class _Internal;
  void set_has_latest();
  void set_has_all();
  void set_has_specific();

  inline bool has_policy_choice() const;
  inline void clear_has_policy_choice();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PolicyChoiceUnion {
    PolicyChoiceUnion() {}
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all_;
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific_;
  } policy_choice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig_ServableToMonitor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor) */ {
 public:
  inline FileSystemStoragePathSourceConfig_ServableToMonitor() : FileSystemStoragePathSourceConfig_ServableToMonitor(nullptr) {}
  virtual ~FileSystemStoragePathSourceConfig_ServableToMonitor();

  FileSystemStoragePathSourceConfig_ServableToMonitor(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  FileSystemStoragePathSourceConfig_ServableToMonitor(FileSystemStoragePathSourceConfig_ServableToMonitor&& from) noexcept
    : FileSystemStoragePathSourceConfig_ServableToMonitor() {
    *this = ::std::move(from);
  }

  inline FileSystemStoragePathSourceConfig_ServableToMonitor& operator=(const FileSystemStoragePathSourceConfig_ServableToMonitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig_ServableToMonitor& operator=(FileSystemStoragePathSourceConfig_ServableToMonitor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileSystemStoragePathSourceConfig_ServableToMonitor& default_instance();

  static inline const FileSystemStoragePathSourceConfig_ServableToMonitor* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig_ServableToMonitor*>(
               &_FileSystemStoragePathSourceConfig_ServableToMonitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileSystemStoragePathSourceConfig_ServableToMonitor& a, FileSystemStoragePathSourceConfig_ServableToMonitor& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig_ServableToMonitor* New() const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableToMonitor>(nullptr);
  }

  FileSystemStoragePathSourceConfig_ServableToMonitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig_ServableToMonitor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig_ServableToMonitor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSystemStoragePathSourceConfig_ServableToMonitor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor";
  }
  protected:
  explicit FileSystemStoragePathSourceConfig_ServableToMonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServableNameFieldNumber = 1,
    kBasePathFieldNumber = 2,
    kServableVersionPolicyFieldNumber = 4,
  };
  // string servable_name = 1;
  void clear_servable_name();
  const std::string& servable_name() const;
  void set_servable_name(const std::string& value);
  void set_servable_name(std::string&& value);
  void set_servable_name(const char* value);
  void set_servable_name(const char* value, size_t size);
  std::string* mutable_servable_name();
  std::string* release_servable_name();
  void set_allocated_servable_name(std::string* servable_name);
  private:
  const std::string& _internal_servable_name() const;
  void _internal_set_servable_name(const std::string& value);
  std::string* _internal_mutable_servable_name();
  public:

  // string base_path = 2;
  void clear_base_path();
  const std::string& base_path() const;
  void set_base_path(const std::string& value);
  void set_base_path(std::string&& value);
  void set_base_path(const char* value);
  void set_base_path(const char* value, size_t size);
  std::string* mutable_base_path();
  std::string* release_base_path();
  void set_allocated_base_path(std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
  bool has_servable_version_policy() const;
  private:
  bool _internal_has_servable_version_policy() const;
  public:
  void clear_servable_version_policy();
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& servable_version_policy() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* release_servable_version_policy();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* mutable_servable_version_policy();
  void set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy);
  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& _internal_servable_version_policy() const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* _internal_mutable_servable_version_policy();
  public:
  void unsafe_arena_set_allocated_servable_version_policy(
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy);
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* unsafe_arena_release_servable_version_policy();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servable_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// -------------------------------------------------------------------

class FileSystemStoragePathSourceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.FileSystemStoragePathSourceConfig) */ {
 public:
  inline FileSystemStoragePathSourceConfig() : FileSystemStoragePathSourceConfig(nullptr) {}
  virtual ~FileSystemStoragePathSourceConfig();

  FileSystemStoragePathSourceConfig(const FileSystemStoragePathSourceConfig& from);
  FileSystemStoragePathSourceConfig(FileSystemStoragePathSourceConfig&& from) noexcept
    : FileSystemStoragePathSourceConfig() {
    *this = ::std::move(from);
  }

  inline FileSystemStoragePathSourceConfig& operator=(const FileSystemStoragePathSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemStoragePathSourceConfig& operator=(FileSystemStoragePathSourceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileSystemStoragePathSourceConfig& default_instance();

  static inline const FileSystemStoragePathSourceConfig* internal_default_instance() {
    return reinterpret_cast<const FileSystemStoragePathSourceConfig*>(
               &_FileSystemStoragePathSourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FileSystemStoragePathSourceConfig& a, FileSystemStoragePathSourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSystemStoragePathSourceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemStoragePathSourceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSystemStoragePathSourceConfig* New() const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig>(nullptr);
  }

  FileSystemStoragePathSourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSystemStoragePathSourceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileSystemStoragePathSourceConfig& from);
  void MergeFrom(const FileSystemStoragePathSourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileSystemStoragePathSourceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.FileSystemStoragePathSourceConfig";
  }
  protected:
  explicit FileSystemStoragePathSourceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileSystemStoragePathSourceConfig_ServableVersionPolicy ServableVersionPolicy;
  typedef FileSystemStoragePathSourceConfig_ServableToMonitor ServableToMonitor;

  // accessors -------------------------------------------------------

  enum : int {
    kServablesFieldNumber = 5,
    kServableNameFieldNumber = 1,
    kBasePathFieldNumber = 2,
    kFileSystemPollWaitSecondsFieldNumber = 3,
    kFailIfZeroVersionsAtStartupFieldNumber = 4,
    kServableVersionsAlwaysPresentFieldNumber = 6,
  };
  // repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
  int servables_size() const;
  private:
  int _internal_servables_size() const;
  public:
  void clear_servables();
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* mutable_servables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
      mutable_servables();
  private:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& _internal_servables(int index) const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* _internal_add_servables();
  public:
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& servables(int index) const;
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* add_servables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
      servables() const;

  // string servable_name = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_servable_name();
  PROTOBUF_DEPRECATED const std::string& servable_name() const;
  PROTOBUF_DEPRECATED void set_servable_name(const std::string& value);
  PROTOBUF_DEPRECATED void set_servable_name(std::string&& value);
  PROTOBUF_DEPRECATED void set_servable_name(const char* value);
  PROTOBUF_DEPRECATED void set_servable_name(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_servable_name();
  PROTOBUF_DEPRECATED std::string* release_servable_name();
  PROTOBUF_DEPRECATED void set_allocated_servable_name(std::string* servable_name);
  private:
  const std::string& _internal_servable_name() const;
  void _internal_set_servable_name(const std::string& value);
  std::string* _internal_mutable_servable_name();
  public:

  // string base_path = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_base_path();
  PROTOBUF_DEPRECATED const std::string& base_path() const;
  PROTOBUF_DEPRECATED void set_base_path(const std::string& value);
  PROTOBUF_DEPRECATED void set_base_path(std::string&& value);
  PROTOBUF_DEPRECATED void set_base_path(const char* value);
  PROTOBUF_DEPRECATED void set_base_path(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_base_path();
  PROTOBUF_DEPRECATED std::string* release_base_path();
  PROTOBUF_DEPRECATED void set_allocated_base_path(std::string* base_path);
  private:
  const std::string& _internal_base_path() const;
  void _internal_set_base_path(const std::string& value);
  std::string* _internal_mutable_base_path();
  public:

  // int64 file_system_poll_wait_seconds = 3;
  void clear_file_system_poll_wait_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 file_system_poll_wait_seconds() const;
  void set_file_system_poll_wait_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_system_poll_wait_seconds() const;
  void _internal_set_file_system_poll_wait_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_fail_if_zero_versions_at_startup();
  PROTOBUF_DEPRECATED bool fail_if_zero_versions_at_startup() const;
  PROTOBUF_DEPRECATED void set_fail_if_zero_versions_at_startup(bool value);
  private:
  bool _internal_fail_if_zero_versions_at_startup() const;
  void _internal_set_fail_if_zero_versions_at_startup(bool value);
  public:

  // bool servable_versions_always_present = 6;
  void clear_servable_versions_always_present();
  bool servable_versions_always_present() const;
  void set_servable_versions_always_present(bool value);
  private:
  bool _internal_servable_versions_always_present() const;
  void _internal_set_servable_versions_always_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.serving.FileSystemStoragePathSourceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor > servables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servable_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_system_poll_wait_seconds_;
  bool fail_if_zero_versions_at_startup_;
  bool servable_versions_always_present_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest

// uint32 num_versions = 1;
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::clear_num_versions() {
  num_versions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_internal_num_versions() const {
  return num_versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::num_versions() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
  return _internal_num_versions();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::_internal_set_num_versions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_versions_ = value;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest::set_num_versions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_versions(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest.num_versions)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_All

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific

// repeated int64 versions = 1;
inline int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_versions_size() const {
  return versions_.size();
}
inline int FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions_size() const {
  return _internal_versions_size();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::clear_versions() {
  versions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_versions(int index) const {
  return versions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return _internal_versions(index);
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::set_versions(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_add_versions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  versions_.Add(value);
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::add_versions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_versions(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_versions() const {
  return versions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::versions() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return _internal_versions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::_internal_mutable_versions() {
  return &versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific.versions)
  return _internal_mutable_versions();
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableVersionPolicy

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest latest = 100;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_has_latest() const {
  return policy_choice_case() == kLatest;
}
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_latest() const {
  return _internal_has_latest();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_latest() {
  _oneof_case_[0] = kLatest;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_latest() {
  if (_internal_has_latest()) {
    if (GetArena() == nullptr) {
      delete policy_choice_.latest_;
    }
    clear_has_policy_choice();
  }
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_latest() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  if (_internal_has_latest()) {
    clear_has_policy_choice();
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* temp = policy_choice_.latest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.latest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_latest() const {
  return _internal_has_latest()
      ? *policy_choice_.latest_
      : reinterpret_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest& FileSystemStoragePathSourceConfig_ServableVersionPolicy::latest() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return _internal_latest();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_release_latest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  if (_internal_has_latest()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* temp = policy_choice_.latest_;
    policy_choice_.latest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_set_allocated_latest(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* latest) {
  clear_policy_choice();
  if (latest) {
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_mutable_latest() {
  if (!_internal_has_latest()) {
    clear_policy_choice();
    set_has_latest();
    policy_choice_.latest_ = CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest >(GetArena());
  }
  return policy_choice_.latest_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_latest() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.latest)
  return _internal_mutable_latest();
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All all = 101;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_has_all() const {
  return policy_choice_case() == kAll;
}
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_all() const {
  return _internal_has_all();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_all() {
  if (_internal_has_all()) {
    if (GetArena() == nullptr) {
      delete policy_choice_.all_;
    }
    clear_has_policy_choice();
  }
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_all() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  if (_internal_has_all()) {
    clear_has_policy_choice();
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* temp = policy_choice_.all_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_all() const {
  return _internal_has_all()
      ? *policy_choice_.all_
      : reinterpret_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All& FileSystemStoragePathSourceConfig_ServableVersionPolicy::all() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return _internal_all();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  if (_internal_has_all()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* temp = policy_choice_.all_;
    policy_choice_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_set_allocated_all(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* all) {
  clear_policy_choice();
  if (all) {
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_mutable_all() {
  if (!_internal_has_all()) {
    clear_policy_choice();
    set_has_all();
    policy_choice_.all_ = CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All >(GetArena());
  }
  return policy_choice_.all_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_All* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_all() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.all)
  return _internal_mutable_all();
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific specific = 102;
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_has_specific() const {
  return policy_choice_case() == kSpecific;
}
inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_specific() const {
  return _internal_has_specific();
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::set_has_specific() {
  _oneof_case_[0] = kSpecific;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_specific() {
  if (_internal_has_specific()) {
    if (GetArena() == nullptr) {
      delete policy_choice_.specific_;
    }
    clear_has_policy_choice();
  }
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::release_specific() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  if (_internal_has_specific()) {
    clear_has_policy_choice();
      ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* temp = policy_choice_.specific_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.specific_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_specific() const {
  return _internal_has_specific()
      ? *policy_choice_.specific_
      : reinterpret_cast< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific&>(::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific& FileSystemStoragePathSourceConfig_ServableVersionPolicy::specific() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return _internal_specific();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_release_specific() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  if (_internal_has_specific()) {
    clear_has_policy_choice();
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* temp = policy_choice_.specific_;
    policy_choice_.specific_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::unsafe_arena_set_allocated_specific(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* specific) {
  clear_policy_choice();
  if (specific) {
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::_internal_mutable_specific() {
  if (!_internal_has_specific()) {
    clear_policy_choice();
    set_has_specific();
    policy_choice_.specific_ = CreateMaybeMessage< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific >(GetArena());
  }
  return policy_choice_.specific_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific* FileSystemStoragePathSourceConfig_ServableVersionPolicy::mutable_specific() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.specific)
  return _internal_mutable_specific();
}

inline bool FileSystemStoragePathSourceConfig_ServableVersionPolicy::has_policy_choice() const {
  return policy_choice_case() != POLICY_CHOICE_NOT_SET;
}
inline void FileSystemStoragePathSourceConfig_ServableVersionPolicy::clear_has_policy_choice() {
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}
inline FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase FileSystemStoragePathSourceConfig_ServableVersionPolicy::policy_choice_case() const {
  return FileSystemStoragePathSourceConfig_ServableVersionPolicy::PolicyChoiceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig_ServableToMonitor

// string servable_name = 1;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_name() {
  servable_name_.ClearToEmpty();
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return _internal_servable_name();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const std::string& value) {
  _internal_set_servable_name(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return _internal_mutable_servable_name();
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_servable_name() const {
  return servable_name_.Get();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_set_servable_name(const std::string& value) {
  
  servable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(std::string&& value) {
  
  servable_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_servable_name(const char* value,
    size_t size) {
  
  servable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_mutable_servable_name() {
  
  return servable_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
  return servable_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_name(std::string* servable_name) {
  if (servable_name != nullptr) {
    
  } else {
    
  }
  servable_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servable_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_name)
}

// string base_path = 2;
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_base_path() {
  base_path_.ClearToEmpty();
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return _internal_base_path();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const std::string& value) {
  _internal_set_base_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_base_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return _internal_mutable_base_path();
}
inline const std::string& FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_base_path() const {
  return base_path_.Get();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_set_base_path(const std::string& value) {
  
  base_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(std::string&& value) {
  
  base_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_base_path(const char* value,
    size_t size) {
  
  base_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_mutable_base_path() {
  
  return base_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig_ServableToMonitor::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
  return base_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    
  } else {
    
  }
  base_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.base_path)
}

// .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy servable_version_policy = 4;
inline bool FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_has_servable_version_policy() const {
  return this != internal_default_instance() && servable_version_policy_ != nullptr;
}
inline bool FileSystemStoragePathSourceConfig_ServableToMonitor::has_servable_version_policy() const {
  return _internal_has_servable_version_policy();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::clear_servable_version_policy() {
  if (GetArena() == nullptr && servable_version_policy_ != nullptr) {
    delete servable_version_policy_;
  }
  servable_version_policy_ = nullptr;
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_servable_version_policy() const {
  const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* p = servable_version_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy&>(
      ::tensorflow::serving::_FileSystemStoragePathSourceConfig_ServableVersionPolicy_default_instance_);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy& FileSystemStoragePathSourceConfig_ServableToMonitor::servable_version_policy() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return _internal_servable_version_policy();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::unsafe_arena_set_allocated_servable_version_policy(
    ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(servable_version_policy_);
  }
  servable_version_policy_ = servable_version_policy;
  if (servable_version_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::release_servable_version_policy() {
  
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = servable_version_policy_;
  servable_version_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::unsafe_arena_release_servable_version_policy() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  
  ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* temp = servable_version_policy_;
  servable_version_policy_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::_internal_mutable_servable_version_policy() {
  
  if (servable_version_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy>(GetArena());
    servable_version_policy_ = p;
  }
  return servable_version_policy_;
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* FileSystemStoragePathSourceConfig_ServableToMonitor::mutable_servable_version_policy() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
  return _internal_mutable_servable_version_policy();
}
inline void FileSystemStoragePathSourceConfig_ServableToMonitor::set_allocated_servable_version_policy(::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableVersionPolicy* servable_version_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete servable_version_policy_;
  }
  if (servable_version_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(servable_version_policy);
    if (message_arena != submessage_arena) {
      servable_version_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servable_version_policy, submessage_arena);
    }
    
  } else {
    
  }
  servable_version_policy_ = servable_version_policy;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor.servable_version_policy)
}

// -------------------------------------------------------------------

// FileSystemStoragePathSourceConfig

// repeated .tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor servables = 5;
inline int FileSystemStoragePathSourceConfig::_internal_servables_size() const {
  return servables_.size();
}
inline int FileSystemStoragePathSourceConfig::servables_size() const {
  return _internal_servables_size();
}
inline void FileSystemStoragePathSourceConfig::clear_servables() {
  servables_.Clear();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::mutable_servables(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >*
FileSystemStoragePathSourceConfig::mutable_servables() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return &servables_;
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::_internal_servables(int index) const {
  return servables_.Get(index);
}
inline const ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor& FileSystemStoragePathSourceConfig::servables(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return _internal_servables(index);
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::_internal_add_servables() {
  return servables_.Add();
}
inline ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor* FileSystemStoragePathSourceConfig::add_servables() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return _internal_add_servables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::serving::FileSystemStoragePathSourceConfig_ServableToMonitor >&
FileSystemStoragePathSourceConfig::servables() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.FileSystemStoragePathSourceConfig.servables)
  return servables_;
}

// string servable_name = 1 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_servable_name() {
  servable_name_.ClearToEmpty();
}
inline const std::string& FileSystemStoragePathSourceConfig::servable_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return _internal_servable_name();
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const std::string& value) {
  _internal_set_servable_name(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline std::string* FileSystemStoragePathSourceConfig::mutable_servable_name() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return _internal_mutable_servable_name();
}
inline const std::string& FileSystemStoragePathSourceConfig::_internal_servable_name() const {
  return servable_name_.Get();
}
inline void FileSystemStoragePathSourceConfig::_internal_set_servable_name(const std::string& value) {
  
  servable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(std::string&& value) {
  
  servable_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline void FileSystemStoragePathSourceConfig::set_servable_name(const char* value,
    size_t size) {
  
  servable_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}
inline std::string* FileSystemStoragePathSourceConfig::_internal_mutable_servable_name() {
  
  return servable_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig::release_servable_name() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
  return servable_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileSystemStoragePathSourceConfig::set_allocated_servable_name(std::string* servable_name) {
  if (servable_name != nullptr) {
    
  } else {
    
  }
  servable_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servable_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_name)
}

// string base_path = 2 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_base_path() {
  base_path_.ClearToEmpty();
}
inline const std::string& FileSystemStoragePathSourceConfig::base_path() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return _internal_base_path();
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const std::string& value) {
  _internal_set_base_path(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline std::string* FileSystemStoragePathSourceConfig::mutable_base_path() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return _internal_mutable_base_path();
}
inline const std::string& FileSystemStoragePathSourceConfig::_internal_base_path() const {
  return base_path_.Get();
}
inline void FileSystemStoragePathSourceConfig::_internal_set_base_path(const std::string& value) {
  
  base_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileSystemStoragePathSourceConfig::set_base_path(std::string&& value) {
  
  base_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline void FileSystemStoragePathSourceConfig::set_base_path(const char* value,
    size_t size) {
  
  base_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}
inline std::string* FileSystemStoragePathSourceConfig::_internal_mutable_base_path() {
  
  return base_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileSystemStoragePathSourceConfig::release_base_path() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
  return base_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileSystemStoragePathSourceConfig::set_allocated_base_path(std::string* base_path) {
  if (base_path != nullptr) {
    
  } else {
    
  }
  base_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.FileSystemStoragePathSourceConfig.base_path)
}

// int64 file_system_poll_wait_seconds = 3;
inline void FileSystemStoragePathSourceConfig::clear_file_system_poll_wait_seconds() {
  file_system_poll_wait_seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSystemStoragePathSourceConfig::_internal_file_system_poll_wait_seconds() const {
  return file_system_poll_wait_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSystemStoragePathSourceConfig::file_system_poll_wait_seconds() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
  return _internal_file_system_poll_wait_seconds();
}
inline void FileSystemStoragePathSourceConfig::_internal_set_file_system_poll_wait_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_system_poll_wait_seconds_ = value;
}
inline void FileSystemStoragePathSourceConfig::set_file_system_poll_wait_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_system_poll_wait_seconds(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.file_system_poll_wait_seconds)
}

// bool fail_if_zero_versions_at_startup = 4 [deprecated = true];
inline void FileSystemStoragePathSourceConfig::clear_fail_if_zero_versions_at_startup() {
  fail_if_zero_versions_at_startup_ = false;
}
inline bool FileSystemStoragePathSourceConfig::_internal_fail_if_zero_versions_at_startup() const {
  return fail_if_zero_versions_at_startup_;
}
inline bool FileSystemStoragePathSourceConfig::fail_if_zero_versions_at_startup() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
  return _internal_fail_if_zero_versions_at_startup();
}
inline void FileSystemStoragePathSourceConfig::_internal_set_fail_if_zero_versions_at_startup(bool value) {
  
  fail_if_zero_versions_at_startup_ = value;
}
inline void FileSystemStoragePathSourceConfig::set_fail_if_zero_versions_at_startup(bool value) {
  _internal_set_fail_if_zero_versions_at_startup(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.fail_if_zero_versions_at_startup)
}

// bool servable_versions_always_present = 6;
inline void FileSystemStoragePathSourceConfig::clear_servable_versions_always_present() {
  servable_versions_always_present_ = false;
}
inline bool FileSystemStoragePathSourceConfig::_internal_servable_versions_always_present() const {
  return servable_versions_always_present_;
}
inline bool FileSystemStoragePathSourceConfig::servable_versions_always_present() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
  return _internal_servable_versions_always_present();
}
inline void FileSystemStoragePathSourceConfig::_internal_set_servable_versions_always_present(bool value) {
  
  servable_versions_always_present_ = value;
}
inline void FileSystemStoragePathSourceConfig::set_servable_versions_always_present(bool value) {
  _internal_set_servable_versions_always_present(value);
  // @@protoc_insertion_point(field_set:tensorflow.serving.FileSystemStoragePathSourceConfig.servable_versions_always_present)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fsources_2fstorage_5fpath_2ffile_5fsystem_5fstorage_5fpath_5fsource_2eproto
