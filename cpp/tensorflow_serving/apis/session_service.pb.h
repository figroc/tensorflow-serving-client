// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/session_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/model.pb.h"
#include "tensorflow/core/protobuf/config.pb.h"
#include "tensorflow/core/protobuf/named_tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
namespace tensorflow {
namespace serving {
class SessionRunRequest;
class SessionRunRequestDefaultTypeInternal;
extern SessionRunRequestDefaultTypeInternal _SessionRunRequest_default_instance_;
class SessionRunResponse;
class SessionRunResponseDefaultTypeInternal;
extern SessionRunResponseDefaultTypeInternal _SessionRunResponse_default_instance_;
}  // namespace serving
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::serving::SessionRunRequest* Arena::CreateMaybeMessage<::tensorflow::serving::SessionRunRequest>(Arena*);
template<> ::tensorflow::serving::SessionRunResponse* Arena::CreateMaybeMessage<::tensorflow::serving::SessionRunResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace serving {

// ===================================================================

class SessionRunRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunRequest) */ {
 public:
  SessionRunRequest();
  virtual ~SessionRunRequest();

  SessionRunRequest(const SessionRunRequest& from);
  SessionRunRequest(SessionRunRequest&& from) noexcept
    : SessionRunRequest() {
    *this = ::std::move(from);
  }

  inline SessionRunRequest& operator=(const SessionRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRunRequest& operator=(SessionRunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunRequest* internal_default_instance() {
    return reinterpret_cast<const SessionRunRequest*>(
               &_SessionRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionRunRequest& a, SessionRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRunRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRunRequest* New() const final {
    return CreateMaybeMessage<SessionRunRequest>(nullptr);
  }

  SessionRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRunRequest& from);
  void MergeFrom(const SessionRunRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.SessionRunRequest";
  }
  protected:
  explicit SessionRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedFieldNumber = 2,
    kFetchFieldNumber = 3,
    kTargetFieldNumber = 4,
    kModelSpecFieldNumber = 1,
    kOptionsFieldNumber = 5,
  };
  // repeated .tensorflow.NamedTensorProto feed = 2;
  int feed_size() const;
  private:
  int _internal_feed_size() const;
  public:
  void clear_feed();
  ::tensorflow::NamedTensorProto* mutable_feed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
      mutable_feed();
  private:
  const ::tensorflow::NamedTensorProto& _internal_feed(int index) const;
  ::tensorflow::NamedTensorProto* _internal_add_feed();
  public:
  const ::tensorflow::NamedTensorProto& feed(int index) const;
  ::tensorflow::NamedTensorProto* add_feed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
      feed() const;

  // repeated string fetch = 3;
  int fetch_size() const;
  private:
  int _internal_fetch_size() const;
  public:
  void clear_fetch();
  const std::string& fetch(int index) const;
  std::string* mutable_fetch(int index);
  void set_fetch(int index, const std::string& value);
  void set_fetch(int index, std::string&& value);
  void set_fetch(int index, const char* value);
  void set_fetch(int index, const char* value, size_t size);
  std::string* add_fetch();
  void add_fetch(const std::string& value);
  void add_fetch(std::string&& value);
  void add_fetch(const char* value);
  void add_fetch(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fetch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fetch();
  private:
  const std::string& _internal_fetch(int index) const;
  std::string* _internal_add_fetch();
  public:

  // repeated string target = 4;
  int target_size() const;
  private:
  int _internal_target_size() const;
  public:
  void clear_target();
  const std::string& target(int index) const;
  std::string* mutable_target(int index);
  void set_target(int index, const std::string& value);
  void set_target(int index, std::string&& value);
  void set_target(int index, const char* value);
  void set_target(int index, const char* value, size_t size);
  std::string* add_target();
  void add_target(const std::string& value);
  void add_target(std::string&& value);
  void add_target(const char* value);
  void add_target(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target();
  private:
  const std::string& _internal_target(int index) const;
  std::string* _internal_add_target();
  public:

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // .tensorflow.RunOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::tensorflow::RunOptions& options() const;
  ::tensorflow::RunOptions* release_options();
  ::tensorflow::RunOptions* mutable_options();
  void set_allocated_options(::tensorflow::RunOptions* options);
  private:
  const ::tensorflow::RunOptions& _internal_options() const;
  ::tensorflow::RunOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::tensorflow::RunOptions* options);
  ::tensorflow::RunOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto > feed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fetch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  ::tensorflow::RunOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SessionRunResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunResponse) */ {
 public:
  SessionRunResponse();
  virtual ~SessionRunResponse();

  SessionRunResponse(const SessionRunResponse& from);
  SessionRunResponse(SessionRunResponse&& from) noexcept
    : SessionRunResponse() {
    *this = ::std::move(from);
  }

  inline SessionRunResponse& operator=(const SessionRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionRunResponse& operator=(SessionRunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionRunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunResponse* internal_default_instance() {
    return reinterpret_cast<const SessionRunResponse*>(
               &_SessionRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionRunResponse& a, SessionRunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionRunResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionRunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionRunResponse* New() const final {
    return CreateMaybeMessage<SessionRunResponse>(nullptr);
  }

  SessionRunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionRunResponse& from);
  void MergeFrom(const SessionRunResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.serving.SessionRunResponse";
  }
  protected:
  explicit SessionRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto);
    return ::descriptor_table_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kModelSpecFieldNumber = 3,
  };
  // repeated .tensorflow.NamedTensorProto tensor = 1;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::tensorflow::NamedTensorProto* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
      mutable_tensor();
  private:
  const ::tensorflow::NamedTensorProto& _internal_tensor(int index) const;
  ::tensorflow::NamedTensorProto* _internal_add_tensor();
  public:
  const ::tensorflow::NamedTensorProto& tensor(int index) const;
  ::tensorflow::NamedTensorProto* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
      tensor() const;

  // .tensorflow.RunMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::tensorflow::RunMetadata& metadata() const;
  ::tensorflow::RunMetadata* release_metadata();
  ::tensorflow::RunMetadata* mutable_metadata();
  void set_allocated_metadata(::tensorflow::RunMetadata* metadata);
  private:
  const ::tensorflow::RunMetadata& _internal_metadata() const;
  ::tensorflow::RunMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::tensorflow::RunMetadata* metadata);
  ::tensorflow::RunMetadata* unsafe_arena_release_metadata();

  // .tensorflow.serving.ModelSpec model_spec = 3;
  bool has_model_spec() const;
  private:
  bool _internal_has_model_spec() const;
  public:
  void clear_model_spec();
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  ::tensorflow::serving::ModelSpec* _internal_mutable_model_spec();
  public:
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto > tensor_;
  ::tensorflow::RunMetadata* metadata_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionRunRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool SessionRunRequest::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool SessionRunRequest::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& SessionRunRequest::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& SessionRunRequest::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.model_spec)
  return _internal_model_spec();
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunRequest::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.model_spec)
  return _internal_mutable_model_spec();
}
inline void SessionRunRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunRequest.model_spec)
}

// repeated .tensorflow.NamedTensorProto feed = 2;
inline int SessionRunRequest::_internal_feed_size() const {
  return feed_.size();
}
inline int SessionRunRequest::feed_size() const {
  return _internal_feed_size();
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::mutable_feed(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.feed)
  return feed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
SessionRunRequest::mutable_feed() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.feed)
  return &feed_;
}
inline const ::tensorflow::NamedTensorProto& SessionRunRequest::_internal_feed(int index) const {
  return feed_.Get(index);
}
inline const ::tensorflow::NamedTensorProto& SessionRunRequest::feed(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.feed)
  return _internal_feed(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::_internal_add_feed() {
  return feed_.Add();
}
inline ::tensorflow::NamedTensorProto* SessionRunRequest::add_feed() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.feed)
  return _internal_add_feed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
SessionRunRequest::feed() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.feed)
  return feed_;
}

// repeated string fetch = 3;
inline int SessionRunRequest::_internal_fetch_size() const {
  return fetch_.size();
}
inline int SessionRunRequest::fetch_size() const {
  return _internal_fetch_size();
}
inline void SessionRunRequest::clear_fetch() {
  fetch_.Clear();
}
inline std::string* SessionRunRequest::add_fetch() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.SessionRunRequest.fetch)
  return _internal_add_fetch();
}
inline const std::string& SessionRunRequest::_internal_fetch(int index) const {
  return fetch_.Get(index);
}
inline const std::string& SessionRunRequest::fetch(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.fetch)
  return _internal_fetch(index);
}
inline std::string* SessionRunRequest::mutable_fetch(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.fetch)
  return fetch_.Mutable(index);
}
inline void SessionRunRequest::set_fetch(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.fetch)
  fetch_.Mutable(index)->assign(value);
}
inline void SessionRunRequest::set_fetch(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.fetch)
  fetch_.Mutable(index)->assign(std::move(value));
}
inline void SessionRunRequest::set_fetch(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fetch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::set_fetch(int index, const char* value, size_t size) {
  fetch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SessionRunRequest.fetch)
}
inline std::string* SessionRunRequest::_internal_add_fetch() {
  return fetch_.Add();
}
inline void SessionRunRequest::add_fetch(const std::string& value) {
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::add_fetch(std::string&& value) {
  fetch_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::add_fetch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fetch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.SessionRunRequest.fetch)
}
inline void SessionRunRequest::add_fetch(const char* value, size_t size) {
  fetch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.SessionRunRequest.fetch)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionRunRequest::fetch() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.fetch)
  return fetch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionRunRequest::mutable_fetch() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.fetch)
  return &fetch_;
}

// repeated string target = 4;
inline int SessionRunRequest::_internal_target_size() const {
  return target_.size();
}
inline int SessionRunRequest::target_size() const {
  return _internal_target_size();
}
inline void SessionRunRequest::clear_target() {
  target_.Clear();
}
inline std::string* SessionRunRequest::add_target() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.serving.SessionRunRequest.target)
  return _internal_add_target();
}
inline const std::string& SessionRunRequest::_internal_target(int index) const {
  return target_.Get(index);
}
inline const std::string& SessionRunRequest::target(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.target)
  return _internal_target(index);
}
inline std::string* SessionRunRequest::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.target)
  return target_.Mutable(index);
}
inline void SessionRunRequest::set_target(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.target)
  target_.Mutable(index)->assign(value);
}
inline void SessionRunRequest::set_target(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.serving.SessionRunRequest.target)
  target_.Mutable(index)->assign(std::move(value));
}
inline void SessionRunRequest::set_target(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::set_target(int index, const char* value, size_t size) {
  target_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.SessionRunRequest.target)
}
inline std::string* SessionRunRequest::_internal_add_target() {
  return target_.Add();
}
inline void SessionRunRequest::add_target(const std::string& value) {
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::add_target(std::string&& value) {
  target_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::add_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.serving.SessionRunRequest.target)
}
inline void SessionRunRequest::add_target(const char* value, size_t size) {
  target_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.serving.SessionRunRequest.target)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SessionRunRequest::target() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunRequest.target)
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SessionRunRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunRequest.target)
  return &target_;
}

// .tensorflow.RunOptions options = 5;
inline bool SessionRunRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool SessionRunRequest::has_options() const {
  return _internal_has_options();
}
inline const ::tensorflow::RunOptions& SessionRunRequest::_internal_options() const {
  const ::tensorflow::RunOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::RunOptions*>(
      &::tensorflow::_RunOptions_default_instance_);
}
inline const ::tensorflow::RunOptions& SessionRunRequest::options() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunRequest.options)
  return _internal_options();
}
inline ::tensorflow::RunOptions* SessionRunRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::RunOptions* SessionRunRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunRequest.options)
  
  ::tensorflow::RunOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::tensorflow::RunOptions* SessionRunRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::RunOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::tensorflow::RunOptions* SessionRunRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunRequest.options)
  return _internal_mutable_options();
}
inline void SessionRunRequest::set_allocated_options(::tensorflow::RunOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options)->GetArena();
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunRequest.options)
}

// -------------------------------------------------------------------

// SessionRunResponse

// .tensorflow.serving.ModelSpec model_spec = 3;
inline bool SessionRunResponse::_internal_has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != nullptr;
}
inline bool SessionRunResponse::has_model_spec() const {
  return _internal_has_model_spec();
}
inline const ::tensorflow::serving::ModelSpec& SessionRunResponse::_internal_model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline const ::tensorflow::serving::ModelSpec& SessionRunResponse::model_spec() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.model_spec)
  return _internal_model_spec();
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::release_model_spec() {
  auto temp = unsafe_arena_release_model_spec();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunResponse.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = nullptr;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::_internal_mutable_model_spec() {
  
  if (model_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  return model_spec_;
}
inline ::tensorflow::serving::ModelSpec* SessionRunResponse::mutable_model_spec() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.model_spec)
  return _internal_mutable_model_spec();
}
inline void SessionRunResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunResponse.model_spec)
}

// repeated .tensorflow.NamedTensorProto tensor = 1;
inline int SessionRunResponse::_internal_tensor_size() const {
  return tensor_.size();
}
inline int SessionRunResponse::tensor_size() const {
  return _internal_tensor_size();
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >*
SessionRunResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.SessionRunResponse.tensor)
  return &tensor_;
}
inline const ::tensorflow::NamedTensorProto& SessionRunResponse::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::tensorflow::NamedTensorProto& SessionRunResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.tensor)
  return _internal_tensor(index);
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::tensorflow::NamedTensorProto* SessionRunResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.SessionRunResponse.tensor)
  return _internal_add_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::NamedTensorProto >&
SessionRunResponse::tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.SessionRunResponse.tensor)
  return tensor_;
}

// .tensorflow.RunMetadata metadata = 2;
inline bool SessionRunResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SessionRunResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::tensorflow::RunMetadata& SessionRunResponse::_internal_metadata() const {
  const ::tensorflow::RunMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tensorflow::RunMetadata*>(
      &::tensorflow::_RunMetadata_default_instance_);
}
inline const ::tensorflow::RunMetadata& SessionRunResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunResponse.metadata)
  return _internal_metadata();
}
inline ::tensorflow::RunMetadata* SessionRunResponse::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunResponse.metadata)
  
  ::tensorflow::RunMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::RunMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::tensorflow::RunMetadata* SessionRunResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunResponse.metadata)
  return _internal_mutable_metadata();
}
inline void SessionRunResponse::set_allocated_metadata(::tensorflow::RunMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata)->GetArena();
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunResponse.metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fsession_5fservice_2eproto
