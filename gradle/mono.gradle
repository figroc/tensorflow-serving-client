task mono {
  dependsOn "generateProto"
  ext {
    distEnv = dist.plus([source: "${protoGenMainRel}/csharp",
                         output: "${buildDir}/mono"])
  }
  inputs.file "mono.csproj"
  inputs.dir distEnv.source
  outputs.dir distEnv.output
  doLast {
    exec {
      environment buildEnviron(distEnv)
      commandLine "dotnet", "build", "-t:build;pack", "mono.csproj"
    }
  }
}

task nuget(type: Exec) {
  dependsOn "mono"
  inputs.dir mono.distEnv.output
  environment buildEnviron(mono.distEnv)
  commandLine "dotnet", "nuget", "push", "${mono.distEnv.output}/${mono.distEnv.build}/${project.name}.${project.version}.nupkg"
}

task __csharp__() {
  dependsOn "mono"
  ext {
    src = "csharp"
    cfg = file("mono.csproj")
    tmp = file("${buildDir}/mono.csproj")
  }
  inputs.file cfg
  inputs.dir mono.distEnv.source
  outputs.file cfg
  outputs.dir src
  doLast {
    copy {
      from mono.distEnv.source
      into src
    }
    exec {
      standardInput cfg.newInputStream()
      standardOutput tmp.newOutputStream()
      commandLine "sed", "s/(/{/g;s/)/}/g"
    }
    exec {
      standardInput tmp.newInputStream()
      standardOutput cfg.newOutputStream()
      environment buildEnviron(mono.distEnv.plus([source: src, output: "bin"]))
      commandLine "envsubst"
    }
  }
}
