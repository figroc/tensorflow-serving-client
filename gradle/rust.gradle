task installProtocGenRust(type: Exec) {
  commandLine "cargo", "install", "--vers", dist.version.proto.rust, "protobuf-codegen"
}

task installGrpcRustPlugin(type: Exec) {
  commandLine "cargo", "install", "--vers", dist.version.proto.grpc, "grpcio-compiler"
}

task generateProtoRust {
  dependsOn "installProtocGenRust"
  dependsOn "installGrpcRustPlugin"
  ext {
    source = "${protoGenMainDir}/rust"
    generated = "${source}/src"
  }
  inputs.file "crate.toml"
  inputs.dir "proto"
  outputs.dir source
  doLast {
    mkdir generated
    fileTree("proto"){ include "**/*.proto" }.visit { fd ->
      if (fd.file.directory) return
      exec {
        commandLine "protoc", "-Iproto",
                    "--plugin=protoc-gen-grpc=${pathOfExecutable('grpc_rust_plugin')}",
                    "--rust_out=${generated}", "--grpc_out=${generated}",
                    fd.path
      }
    }
    file("${generated}/lib.rs").newOutputStream().withWriter { rs ->
      rs.write "// @generated\n"
      file(generated).list().each { name ->
        if (name == "lib.rs") return
        if (name.endsWith(".rs")) {
          rs.write "pub mod ${name[0..-4]};\n"
        }
      }
    }
    exec {
      environment buildEnviron(dist)
      standardInput file("crate.toml").newInputStream()
      standardOutput file("${source}/Cargo.toml").newOutputStream()
      commandLine "envsubst"
    }
    copy {
      from "LICENSE", "README.md"
      into source
    }
  }
}

task rust(type: Exec) {
  dependsOn "generateProtoRust"
  inputs.dir generateProtoRust.source
  environment "CARGO_TARGET_DIR", "${buildDir}/cargo"
  workingDir generateProtoRust.source
  commandLine "cargo", "build"
  args(dist.build == "release" ? ["--release"] : [])
}

task crate(type: Exec) {
  dependsOn "rust"
  inputs.dir generateProtoRust.source
  environment "CARGO_TARGET_DIR", "${buildDir}/cargo"
  workingDir generateProtoRust.source
  commandLine "cargo", "publish"
}

task __rust__ {
  dependsOn "rust"
  ext {
    cfg = "Cargo.toml"
    src = "rust"
  }
  inputs.dir generateProtoRust.source
  outputs.file cfg
  outputs.dir src
  doLast {
    copy {
      from "${generateProtoRust.source}/src"
      into src
    }
    copy {
      from "${generateProtoRust.source}/${cfg}"
      into "."
    }
    file(cfg).append("\npath = \"${src}/lib.rs\"\n")
    delete { delete "crate.toml" }
  }
}
