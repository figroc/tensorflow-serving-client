task wheel {
  dependsOn "generateProto"
  ext {
    distEnv = dist.plus([
      name_: "${dist.name.snake}_grpc",
      source: "${protoGenMainRel}/python",
      output: "${buildDir}/dist"])
  }
  inputs.file "setup.py"
  inputs.dir distEnv.source
  doLast {
    fileTree(distEnv.source).visit { fd ->
      if (fd.file.file) return
      exec {
        workingDir fd.file
        commandLine "touch", "__init__.py"
      }
    }
    exec {
      environment buildEnviron(distEnv)
      commandLine "python3", "setup.py",
                  "sdist", "-d", distEnv.output,
                  "bdist_wheel", "-d", distEnv.output
    }
  }
}

task twine(type: Exec) {
  dependsOn "wheel"
  ext {
    target = "${wheel.distEnv.output}/${wheel.distEnv.name_}-*"
  }
  inputs.files target
  commandLine "twine", "upload", "-s", "-i", "50E54CCB", target
}

task __python__ {
  dependsOn "wheel"
  ext {
    src = "python"
    cfg = file("setup.py")
    tmp = file("${buildDir}/setup.py")
  }
  inputs.file cfg
  inputs.dir wheel.distEnv.source
  outputs.file cfg
  outputs.dir src
  doLast {
    copy {
      from wheel.distEnv.source
      include "tensorflow/**", "tensorflow_serving/**"
      into src
    }
    exec {
      standardInput cfg.newInputStream()
      standardOutput tmp.newOutputStream()
      commandLine "sed", "s/environ\\[\"\\(.*\\)\"\\]/\"\\\${\\1}\"/g"
    }
    exec {
      standardInput tmp.newInputStream()
      standardOutput cfg.newOutputStream()
      environment buildEnviron(wheel.distEnv.plus([source: src]))
      commandLine "envsubst"
    }
  }
}
