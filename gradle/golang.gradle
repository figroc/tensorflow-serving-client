task installProtocGenGo(type: Exec) {
  onlyIf {
    pathOfExecutable("protoc-gen-go") == ""
  }
  commandLine "go", "install", "github.com/golang/protobuf/protoc-gen-go@v${dist.version.proto.go}"
}

task generateProtoGo {
  dependsOn "installProtocGenGo"
  ext {
    source = "${protoGenMainDir}/go"
  }
  inputs.file "mod.go"
  inputs.file "lib.go"
  inputs.dir "proto"
  outputs.dir source
  doLast {
    mkdir source
    fileTree("proto"){ include "**/*.proto" }.visit { fd ->
      if (fd.file.directory) return
      println("generate go: ${fd.path}")
      exec {
        commandLine "protoc", "-Iproto", "--go_out=plugins=grpc:${source}", fd.path
      }
    }
    copy {
      from "lib.go"
      into source
    }
    exec {
      environment buildEnviron(dist)
      standardInput file("mod.go").newInputStream()
      standardOutput file("${source}/go.mod").newOutputStream()
      commandLine "envsubst"
    }
    file(source).eachDir { fd ->
      file("${source}/go.mod").append("\nreplace ${fd.name} => ./${fd.name}")
      var mod = file("${fd.path}/go.mod")
      if (!mod.exists()) {
        println("generate mod: ${fd.name}/go.mod")
        mod.write("module ${fd.name}\n\ngo 1.12")
      }
    }
  }
}

task golang {
  dependsOn "generateProtoGo"
  inputs.dir generateProtoGo.source
  outputs.dir generateProtoGo.source
  doLast {
    exec {
      workingDir generateProtoGo.source
      commandLine "go", "mod", "tidy"
    }
    exec {
      workingDir generateProtoGo.source
      commandLine "go", "build", "-v", "-pkgdir", generateProtoGo.source
      args(dist.build == "release" ? ["-ldflags", "-s -w"] : [])
      args("./...")
    }
  }
}

task __golang__ {
  dependsOn "golang"
  ext {
    src = "go"
    git = dist.url.replaceFirst('^\\w+://', '').replaceFirst('/$', '')
  }
  inputs.dir generateProtoGo.source
  outputs.dir src
  doLast {
    copy {
      from generateProtoGo.source
      exclude "**/go.mod", "**/go.sum"
      into src
      filter { line ->
         line.replaceFirst('(\\w+\\s+")(tensorflow(_serving)?(/\\w+)*")',
                           '$1' + "${git}/v${dist.version.major}/${src}/" + '$2')
      }
    }
    copy {
      from "${generateProtoGo.source}/go.mod"
      into "."
      filter { line ->
        line.matches('\\s*(replace|tensorflow(_serving)?)\\s+.*') ? null : line
      }
    }
    delete { delete "mod.go", "lib.go" }
  }
}
