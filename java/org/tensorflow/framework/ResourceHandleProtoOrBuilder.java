// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/resource_handle.proto

package org.tensorflow.framework;

public interface ResourceHandleProtoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:tensorflow.ResourceHandleProto)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique name for the device containing the resource.
   * </pre>
   *
   * <code>string device = 1;</code>
   * @return The device.
   */
  java.lang.String getDevice();
  /**
   * <pre>
   * Unique name for the device containing the resource.
   * </pre>
   *
   * <code>string device = 1;</code>
   * @return The bytes for device.
   */
  com.google.protobuf.ByteString
      getDeviceBytes();

  /**
   * <pre>
   * Container in which this resource is placed.
   * </pre>
   *
   * <code>string container = 2;</code>
   * @return The container.
   */
  java.lang.String getContainer();
  /**
   * <pre>
   * Container in which this resource is placed.
   * </pre>
   *
   * <code>string container = 2;</code>
   * @return The bytes for container.
   */
  com.google.protobuf.ByteString
      getContainerBytes();

  /**
   * <pre>
   * Unique name of this resource.
   * </pre>
   *
   * <code>string name = 3;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Unique name of this resource.
   * </pre>
   *
   * <code>string name = 3;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Hash code for the type of the resource. Is only valid in the same device
   * and in the same execution.
   * </pre>
   *
   * <code>uint64 hash_code = 4;</code>
   * @return The hashCode.
   */
  long getHashCode();

  /**
   * <pre>
   * For debug-only, the name of the type pointed to by this handle, if
   * available.
   * </pre>
   *
   * <code>string maybe_type_name = 5;</code>
   * @return The maybeTypeName.
   */
  java.lang.String getMaybeTypeName();
  /**
   * <pre>
   * For debug-only, the name of the type pointed to by this handle, if
   * available.
   * </pre>
   *
   * <code>string maybe_type_name = 5;</code>
   * @return The bytes for maybeTypeName.
   */
  com.google.protobuf.ByteString
      getMaybeTypeNameBytes();

  /**
   * <pre>
   * Data types and shapes for the underlying resource.
   * </pre>
   *
   * <code>repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
   */
  java.util.List<org.tensorflow.framework.ResourceHandleProto.DtypeAndShape> 
      getDtypesAndShapesList();
  /**
   * <pre>
   * Data types and shapes for the underlying resource.
   * </pre>
   *
   * <code>repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
   */
  org.tensorflow.framework.ResourceHandleProto.DtypeAndShape getDtypesAndShapes(int index);
  /**
   * <pre>
   * Data types and shapes for the underlying resource.
   * </pre>
   *
   * <code>repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
   */
  int getDtypesAndShapesCount();
  /**
   * <pre>
   * Data types and shapes for the underlying resource.
   * </pre>
   *
   * <code>repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
   */
  java.util.List<? extends org.tensorflow.framework.ResourceHandleProto.DtypeAndShapeOrBuilder> 
      getDtypesAndShapesOrBuilderList();
  /**
   * <pre>
   * Data types and shapes for the underlying resource.
   * </pre>
   *
   * <code>repeated .tensorflow.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;</code>
   */
  org.tensorflow.framework.ResourceHandleProto.DtypeAndShapeOrBuilder getDtypesAndShapesOrBuilder(
      int index);

  /**
   * <pre>
   * A set of devices containing the resource. If empty, the resource only
   * exists on `device`.
   * </pre>
   *
   * <code>repeated string allowed_devices = 7;</code>
   * @return A list containing the allowedDevices.
   */
  java.util.List<java.lang.String>
      getAllowedDevicesList();
  /**
   * <pre>
   * A set of devices containing the resource. If empty, the resource only
   * exists on `device`.
   * </pre>
   *
   * <code>repeated string allowed_devices = 7;</code>
   * @return The count of allowedDevices.
   */
  int getAllowedDevicesCount();
  /**
   * <pre>
   * A set of devices containing the resource. If empty, the resource only
   * exists on `device`.
   * </pre>
   *
   * <code>repeated string allowed_devices = 7;</code>
   * @param index The index of the element to return.
   * @return The allowedDevices at the given index.
   */
  java.lang.String getAllowedDevices(int index);
  /**
   * <pre>
   * A set of devices containing the resource. If empty, the resource only
   * exists on `device`.
   * </pre>
   *
   * <code>repeated string allowed_devices = 7;</code>
   * @param index The index of the value to return.
   * @return The bytes of the allowedDevices at the given index.
   */
  com.google.protobuf.ByteString
      getAllowedDevicesBytes(int index);
}
