// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/saver.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A version number that identifies a different on-disk checkpoint format.
// Usually, each subclass of BaseSaverBuilder works with a particular
// version/format.  However, it is possible that the same builder may be
// upgraded to support a newer checkpoint format in the future.
type SaverDef_CheckpointFormatVersion int32

const (
	// Internal legacy format.
	SaverDef_LEGACY SaverDef_CheckpointFormatVersion = 0
	// Deprecated format: tf.Saver() which works with tensorflow::table::Table.
	SaverDef_V1 SaverDef_CheckpointFormatVersion = 1
	// Current format: more efficient.
	SaverDef_V2 SaverDef_CheckpointFormatVersion = 2
)

var SaverDef_CheckpointFormatVersion_name = map[int32]string{
	0: "LEGACY",
	1: "V1",
	2: "V2",
}

var SaverDef_CheckpointFormatVersion_value = map[string]int32{
	"LEGACY": 0,
	"V1":     1,
	"V2":     2,
}

func (x SaverDef_CheckpointFormatVersion) String() string {
	return proto.EnumName(SaverDef_CheckpointFormatVersion_name, int32(x))
}

func (SaverDef_CheckpointFormatVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5551ea1a7581c104, []int{0, 0}
}

// Protocol buffer representing the configuration of a Saver.
type SaverDef struct {
	// The name of the tensor in which to specify the filename when saving or
	// restoring a model checkpoint.
	FilenameTensorName string `protobuf:"bytes,1,opt,name=filename_tensor_name,json=filenameTensorName,proto3" json:"filename_tensor_name,omitempty"`
	// The operation to run when saving a model checkpoint.
	SaveTensorName string `protobuf:"bytes,2,opt,name=save_tensor_name,json=saveTensorName,proto3" json:"save_tensor_name,omitempty"`
	// The operation to run when restoring a model checkpoint.
	RestoreOpName string `protobuf:"bytes,3,opt,name=restore_op_name,json=restoreOpName,proto3" json:"restore_op_name,omitempty"`
	// Maximum number of checkpoints to keep.  If 0, no checkpoints are deleted.
	MaxToKeep int32 `protobuf:"varint,4,opt,name=max_to_keep,json=maxToKeep,proto3" json:"max_to_keep,omitempty"`
	// Shard the save files, one per device that has Variable nodes.
	Sharded bool `protobuf:"varint,5,opt,name=sharded,proto3" json:"sharded,omitempty"`
	// How often to keep an additional checkpoint. If not specified, only the last
	// "max_to_keep" checkpoints are kept; if specified, in addition to keeping
	// the last "max_to_keep" checkpoints, an additional checkpoint will be kept
	// for every n hours of training.
	KeepCheckpointEveryNHours float32                          `protobuf:"fixed32,6,opt,name=keep_checkpoint_every_n_hours,json=keepCheckpointEveryNHours,proto3" json:"keep_checkpoint_every_n_hours,omitempty"`
	Version                   SaverDef_CheckpointFormatVersion `protobuf:"varint,7,opt,name=version,proto3,enum=tensorflow.SaverDef_CheckpointFormatVersion" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                         `json:"-"`
	XXX_unrecognized          []byte                           `json:"-"`
	XXX_sizecache             int32                            `json:"-"`
}

func (m *SaverDef) Reset()         { *m = SaverDef{} }
func (m *SaverDef) String() string { return proto.CompactTextString(m) }
func (*SaverDef) ProtoMessage()    {}
func (*SaverDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_5551ea1a7581c104, []int{0}
}

func (m *SaverDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaverDef.Unmarshal(m, b)
}
func (m *SaverDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaverDef.Marshal(b, m, deterministic)
}
func (m *SaverDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaverDef.Merge(m, src)
}
func (m *SaverDef) XXX_Size() int {
	return xxx_messageInfo_SaverDef.Size(m)
}
func (m *SaverDef) XXX_DiscardUnknown() {
	xxx_messageInfo_SaverDef.DiscardUnknown(m)
}

var xxx_messageInfo_SaverDef proto.InternalMessageInfo

func (m *SaverDef) GetFilenameTensorName() string {
	if m != nil {
		return m.FilenameTensorName
	}
	return ""
}

func (m *SaverDef) GetSaveTensorName() string {
	if m != nil {
		return m.SaveTensorName
	}
	return ""
}

func (m *SaverDef) GetRestoreOpName() string {
	if m != nil {
		return m.RestoreOpName
	}
	return ""
}

func (m *SaverDef) GetMaxToKeep() int32 {
	if m != nil {
		return m.MaxToKeep
	}
	return 0
}

func (m *SaverDef) GetSharded() bool {
	if m != nil {
		return m.Sharded
	}
	return false
}

func (m *SaverDef) GetKeepCheckpointEveryNHours() float32 {
	if m != nil {
		return m.KeepCheckpointEveryNHours
	}
	return 0
}

func (m *SaverDef) GetVersion() SaverDef_CheckpointFormatVersion {
	if m != nil {
		return m.Version
	}
	return SaverDef_LEGACY
}

func init() {
	proto.RegisterEnum("tensorflow.SaverDef_CheckpointFormatVersion", SaverDef_CheckpointFormatVersion_name, SaverDef_CheckpointFormatVersion_value)
	proto.RegisterType((*SaverDef)(nil), "tensorflow.SaverDef")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/saver.proto", fileDescriptor_5551ea1a7581c104)
}

var fileDescriptor_5551ea1a7581c104 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x8b, 0xd3, 0x40,
	0x10, 0xc6, 0xdd, 0xd4, 0xa6, 0xed, 0x16, 0x6b, 0x58, 0x05, 0xe3, 0x83, 0x12, 0x8a, 0x48, 0x1e,
	0x24, 0xd1, 0x16, 0xdf, 0xb5, 0xb5, 0x55, 0x50, 0x6a, 0x89, 0xa5, 0xa0, 0x08, 0x4b, 0x9a, 0x4e,
	0x9a, 0xd0, 0x26, 0x13, 0x36, 0x9b, 0x5e, 0xef, 0x4f, 0xb8, 0xff, 0xf8, 0x1e, 0x8f, 0xdd, 0x5e,
	0xae, 0x3d, 0xb8, 0x7b, 0xca, 0xcc, 0x7c, 0xbf, 0x2f, 0x03, 0xf3, 0x2d, 0x7d, 0x27, 0x21, 0x2f,
	0x51, 0xc4, 0x3b, 0xbc, 0xf0, 0x23, 0x14, 0xe0, 0x17, 0x02, 0x25, 0xae, 0xaa, 0xd8, 0x2f, 0xc3,
	0x3d, 0x08, 0x4f, 0xb7, 0x8c, 0x9e, 0xa8, 0xfe, 0x55, 0x83, 0xb6, 0xff, 0x28, 0xed, 0x1b, 0xc4,
	0xec, 0x23, 0x7d, 0x19, 0xa7, 0x3b, 0xc8, 0xc3, 0x0c, 0xf8, 0x91, 0xe1, 0xaa, 0xb6, 0x89, 0x43,
	0xdc, 0x4e, 0xc0, 0x6a, 0x6d, 0xa1, 0xa5, 0x59, 0x98, 0x01, 0x73, 0xa9, 0xa5, 0xfe, 0x7c, 0x8f,
	0x36, 0x34, 0xdd, 0x53, 0xf3, 0x33, 0xf2, 0x3d, 0x7d, 0x2e, 0xa0, 0x94, 0x28, 0x80, 0x63, 0x71,
	0x04, 0x1b, 0x1a, 0x7c, 0x76, 0x3b, 0xfe, 0x5d, 0x68, 0xee, 0x2d, 0xed, 0x66, 0xe1, 0x81, 0x4b,
	0xe4, 0x5b, 0x80, 0xc2, 0x7e, 0xea, 0x10, 0xb7, 0x19, 0x74, 0xb2, 0xf0, 0xb0, 0xc0, 0x9f, 0x00,
	0x05, 0xb3, 0x69, 0xab, 0x4c, 0x42, 0xb1, 0x86, 0xb5, 0xdd, 0x74, 0x88, 0xdb, 0x0e, 0xea, 0x96,
	0x7d, 0xa1, 0x6f, 0x94, 0x85, 0x47, 0x09, 0x44, 0xdb, 0x02, 0xd3, 0x5c, 0x72, 0xd8, 0x83, 0xb8,
	0xe4, 0x39, 0x4f, 0xb0, 0x12, 0xa5, 0x6d, 0x3a, 0xc4, 0x35, 0x82, 0xd7, 0x0a, 0x1a, 0xdf, 0x31,
	0x13, 0x85, 0xcc, 0x7e, 0x28, 0x80, 0x4d, 0x69, 0x6b, 0x0f, 0xa2, 0x4c, 0x31, 0xb7, 0x5b, 0x0e,
	0x71, 0x7b, 0x83, 0x0f, 0xde, 0xe9, 0x54, 0x5e, 0x7d, 0x26, 0xef, 0x64, 0x9e, 0xa2, 0xc8, 0x42,
	0xb9, 0x3c, 0x7a, 0x82, 0xda, 0xdc, 0xff, 0x4c, 0x5f, 0x3d, 0xc2, 0x30, 0x4a, 0xcd, 0x5f, 0x93,
	0xef, 0x5f, 0xc7, 0x7f, 0xad, 0x27, 0xcc, 0xa4, 0xc6, 0xf2, 0x93, 0x45, 0xf4, 0x77, 0x60, 0x19,
	0xa3, 0xff, 0xf4, 0x05, 0x8a, 0xcd, 0xf9, 0xca, 0x4a, 0xa6, 0xbb, 0x51, 0x57, 0x2f, 0x9e, 0xab,
	0xe8, 0xca, 0x39, 0xf9, 0x37, 0xdc, 0xa4, 0x32, 0xa9, 0x56, 0x5e, 0x84, 0x99, 0x7f, 0x16, 0xf7,
	0xc3, 0xe5, 0x06, 0xf5, 0x3b, 0xb8, 0x26, 0x64, 0x65, 0xea, 0xf0, 0x87, 0x37, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x8d, 0xfa, 0x1f, 0xa3, 0x24, 0x02, 0x00, 0x00,
}
